(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{178:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),n("p",[t._v("有些“死区”比较隐蔽，不太容易发现。")]),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),n("p",[t._v("总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。")]),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),n("p",[t._v("因此，不能在函数内部重新声明参数。")]),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),n("p",[t._v("ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。")]),t._v(" "),n("p",[t._v("第一种场景，内层变量可能会覆盖外层变量。")]),t._v(" "),t._m(50),t._m(51),t._v(" "),n("p",[t._v("第二种场景，用来计数的循环变量泄露为全局变量。")]),t._v(" "),t._m(52),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._m(57),t._v(" "),n("p",[t._v("ES6 允许块级作用域的任意嵌套。")]),t._v(" "),t._m(58),n("p",[t._v("上面代码使用了一个五层的块级作用域。外层作用域无法读取内层作用域的变量。")]),t._v(" "),t._m(59),n("p",[t._v("内层作用域可以定义外层作用域的同名变量。")]),t._v(" "),t._m(60),n("p",[t._v("块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。")]),t._v(" "),t._m(61),t._m(62),t._v(" "),n("p",[t._v("函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。")]),t._v(" "),n("p",[t._v("ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。")]),t._v(" "),t._m(63),n("p",[t._v("上面两种函数声明，根据 ES5 的规定都是非法的。")]),t._v(" "),n("p",[t._v("但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。")]),t._v(" "),t._m(64),t._v(" "),t._m(65),t._m(66),t._v(" "),t._m(67),t._m(68),t._v(" "),n("p",[t._v("原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 在"),n("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics",target:"_blank",rel:"noopener noreferrer"}},[t._v("附录 B"),n("OutboundLink")],1),t._v("里面规定，浏览器的实现可以不遵守上面的规定，有自己的"),n("a",{attrs:{href:"http://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("行为方式"),n("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),n("p",[t._v("上面的代码在符合 ES6 的浏览器中，都会报错，因为实际运行的是下面的代码。")]),t._v(" "),t._m(73),n("p",[t._v("考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。")]),t._v(" "),t._m(74),n("p",[t._v("另外，还有一个需要注意的地方。ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错。")]),t._v(" "),t._m(75),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),n("p",[t._v("上面代码表明改变常量的值会报错。")]),t._v(" "),t._m(80),t._v(" "),t._m(81),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._m(85),t._v(" "),t._m(86),t._m(87),t._v(" "),t._m(88),t._v(" "),t._m(89),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._m(93),t._v(" "),n("p",[t._v("下面是另一个例子。")]),t._v(" "),t._m(94),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._m(98),t._v(" "),n("p",[t._v("除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。")]),t._v(" "),t._m(99),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),t._m(104),n("p",[t._v("上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。")]),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),t._m(107),t._m(108),t._v(" "),t._m(109),t._v(" "),n("p",[t._v("ES5 的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。")]),t._v(" "),t._m(110),t._v(" "),t._m(111),t._v(" "),t._m(112),t._v(" "),n("p",[t._v("综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。")]),t._v(" "),t._m(113),n("p",[t._v("现在有一个"),n("a",{attrs:{href:"https://github.com/tc39/proposal-global",target:"_blank",rel:"noopener noreferrer"}},[t._v("提案"),n("OutboundLink")],1),t._v("，在语言标准的层面，引入"),n("code",[t._v("global")]),t._v("作为顶层对象。也就是说，在所有环境下，"),n("code",[t._v("global")]),t._v("都是存在的，都可以从它拿到顶层对象。")]),t._v(" "),n("p",[t._v("垫片库"),n("a",{attrs:{href:"https://github.com/ljharb/System.global",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("system.global")]),n("OutboundLink")],1),t._v("模拟了这个提案，可以在所有环境拿到"),n("code",[t._v("global")]),t._v("。")]),t._v(" "),t._m(114),t._m(115),t._v(" "),t._m(116),t._m(117)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"let-和-const-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-和-const-命令","aria-hidden":"true"}},[this._v("#")]),this._v(" let 和 const 命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"let-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-命令","aria-hidden":"true"}},[this._v("#")]),this._v(" let 命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本用法","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本用法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ES6 新增了"),e("code",[this._v("let")]),this._v("命令，用来声明变量。它的用法类似于"),e("code",[this._v("var")]),this._v("，但是所声明的变量，只在"),e("code",[this._v("let")]),this._v("命令所在的代码块内有效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("{\n  let a = 10;\n  var b = 1;\n}\n\na // ReferenceError: a is not defined.\nb // 1\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码在代码块之中，分别用"),n("code",[t._v("let")]),t._v("和"),n("code",[t._v("var")]),t._v("声明了两个变量。然后在代码块之外调用这两个变量，结果"),n("code",[t._v("let")]),t._v("声明的变量报错，"),n("code",[t._v("var")]),t._v("声明的变量返回了正确的值。这表明，"),n("code",[t._v("let")]),t._v("声明的变量只在它所在的代码块有效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("for")]),this._v("循环的计数器，就很合适使用"),e("code",[this._v("let")]),this._v("命令。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("for (let i = 0; i < 10; i++) {\n  // ...\n}\n\nconsole.log(i);\n// ReferenceError: i is not defined\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，计数器"),e("code",[this._v("i")]),this._v("只在"),e("code",[this._v("for")]),this._v("循环体内有效，在循环体外引用就会报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("下面的代码如果使用"),e("code",[this._v("var")]),this._v("，最后输出的是"),e("code",[this._v("10")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码中，变量"),n("code",[t._v("i")]),t._v("是"),n("code",[t._v("var")]),t._v("命令声明的，在全局范围内都有效，所以全局只有一个变量"),n("code",[t._v("i")]),t._v("。每一次循环，变量"),n("code",[t._v("i")]),t._v("的值都会发生改变，而循环内被赋给数组"),n("code",[t._v("a")]),t._v("的函数内部的"),n("code",[t._v("console.log(i)")]),t._v("，里面的"),n("code",[t._v("i")]),t._v("指向的就是全局的"),n("code",[t._v("i")]),t._v("。也就是说，所有数组"),n("code",[t._v("a")]),t._v("的成员里面的"),n("code",[t._v("i")]),t._v("，指向的都是同一个"),n("code",[t._v("i")]),t._v("，导致运行时输出的是最后一轮的"),n("code",[t._v("i")]),t._v("的值，也就是 10。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果使用"),e("code",[this._v("let")]),this._v("，声明的变量仅在块级作用域内有效，最后输出的是 6。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码中，变量"),n("code",[t._v("i")]),t._v("是"),n("code",[t._v("let")]),t._v("声明的，当前的"),n("code",[t._v("i")]),t._v("只在本轮循环有效，所以每一次循环的"),n("code",[t._v("i")]),t._v("其实都是一个新的变量，所以最后输出的是"),n("code",[t._v("6")]),t._v("。你可能会问，如果每一轮循环的变量"),n("code",[t._v("i")]),t._v("都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量"),n("code",[t._v("i")]),t._v("时，就在上一轮循环的基础上进行计算。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("另外，"),e("code",[this._v("for")]),this._v("循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("for (let i = 0; i < 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}\n// abc\n// abc\n// abc\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码正确运行，输出了 3 次"),e("code",[this._v("abc")]),this._v("。这表明函数内部的变量"),e("code",[this._v("i")]),this._v("与循环变量"),e("code",[this._v("i")]),this._v("不在同一个作用域，有各自单独的作用域。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"不存在变量提升"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不存在变量提升","aria-hidden":"true"}},[this._v("#")]),this._v(" 不存在变量提升")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("var")]),this._v("命令会发生”变量提升“现象，即变量可以在声明之前使用，值为"),e("code",[this._v("undefined")]),this._v("。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了纠正这种现象，"),e("code",[this._v("let")]),this._v("命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码中，变量"),n("code",[t._v("foo")]),t._v("用"),n("code",[t._v("var")]),t._v("命令声明，会发生变量提升，即脚本开始运行时，变量"),n("code",[t._v("foo")]),t._v("已经存在了，但是没有值，所以会输出"),n("code",[t._v("undefined")]),t._v("。变量"),n("code",[t._v("bar")]),t._v("用"),n("code",[t._v("let")]),t._v("命令声明，不会发生变量提升。这表示在声明它之前，变量"),n("code",[t._v("bar")]),t._v("是不存在的，这时如果用到它，就会抛出一个错误。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"暂时性死区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂时性死区","aria-hidden":"true"}},[this._v("#")]),this._v(" 暂时性死区")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("只要块级作用域内存在"),e("code",[this._v("let")]),this._v("命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码中，存在全局变量"),n("code",[t._v("tmp")]),t._v("，但是块级作用域内"),n("code",[t._v("let")]),t._v("又声明了一个局部变量"),n("code",[t._v("tmp")]),t._v("，导致后者绑定这个块级作用域，所以在"),n("code",[t._v("let")]),t._v("声明变量前，对"),n("code",[t._v("tmp")]),t._v("赋值会报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ES6 明确规定，如果区块中存在"),e("code",[this._v("let")]),this._v("和"),e("code",[this._v("const")]),this._v("命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("总之，在代码块内，使用"),e("code",[this._v("let")]),this._v("命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("if (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，在"),e("code",[this._v("let")]),this._v("命令声明变量"),e("code",[this._v("tmp")]),this._v("之前，都属于变量"),e("code",[this._v("tmp")]),this._v("的“死区”。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("“暂时性死区”也意味着"),e("code",[this._v("typeof")]),this._v("不再是一个百分之百安全的操作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("typeof x; // ReferenceError\nlet x;\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码中，变量"),n("code",[t._v("x")]),t._v("使用"),n("code",[t._v("let")]),t._v("命令声明，所以在声明之前，都属于"),n("code",[t._v("x")]),t._v("的“死区”，只要用到该变量就会报错。因此，"),n("code",[t._v("typeof")]),t._v("运行时就会抛出一个"),n("code",[t._v("ReferenceError")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("作为比较，如果一个变量根本没有被声明，使用"),e("code",[this._v("typeof")]),this._v("反而不会报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('typeof undeclared_variable // "undefined"\n\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，"),e("code",[this._v("undeclared_variable")]),this._v("是一个不存在的变量名，结果返回“undefined”。所以，在没有"),e("code",[this._v("let")]),this._v("之前，"),e("code",[this._v("typeof")]),this._v("运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码中，调用"),n("code",[t._v("bar")]),t._v("函数之所以报错（某些实现可能不报错），是因为参数"),n("code",[t._v("x")]),t._v("默认值等于另一个参数"),n("code",[t._v("y")]),t._v("，而此时"),n("code",[t._v("y")]),t._v("还没有声明，属于”死区“。如果"),n("code",[t._v("y")]),t._v("的默认值是"),n("code",[t._v("x")]),t._v("，就不会报错，因为此时"),n("code",[t._v("x")]),t._v("已经声明了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function bar(x = 2, y = x) {\n  return [x, y];\n}\nbar(); // [2, 2]\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("另外，下面的代码也会报错，与"),e("code",[this._v("var")]),this._v("的行为不同。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 不报错\nvar x = x;\n\n// 报错\nlet x = x;\n// ReferenceError: x is not defined\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码报错，也是因为暂时性死区。使用"),e("code",[this._v("let")]),this._v("声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量"),e("code",[this._v("x")]),this._v("的声明语句还没有执行完成前，就去取"),e("code",[this._v("x")]),this._v("的值，导致报错”x 未定义“。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ES6 规定暂时性死区和"),e("code",[this._v("let")]),this._v("、"),e("code",[this._v("const")]),this._v("语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"不允许重复声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不允许重复声明","aria-hidden":"true"}},[this._v("#")]),this._v(" 不允许重复声明")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("let")]),this._v("不允许在相同作用域内，重复声明同一个变量。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 报错\nfunction func() {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction func() {\n  let a = 10;\n  let a = 1;\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"块级作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域","aria-hidden":"true"}},[this._v("#")]),this._v(" 块级作用域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"为什么需要块级作用域？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要块级作用域？","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么需要块级作用域？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var tmp = new Date();\n\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\n\nf(); // undefined\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码的原意是，"),n("code",[t._v("if")]),t._v("代码块的外部使用外层的"),n("code",[t._v("tmp")]),t._v("变量，内部使用内层的"),n("code",[t._v("tmp")]),t._v("变量。但是，函数"),n("code",[t._v("f")]),t._v("执行后，输出结果为"),n("code",[t._v("undefined")]),t._v("，原因在于变量提升，导致内层的"),n("code",[t._v("tmp")]),t._v("变量覆盖了外层的"),n("code",[t._v("tmp")]),t._v("变量。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var s = 'hello';\n\nfor (var i = 0; i < s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，变量"),e("code",[this._v("i")]),this._v("只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"es6-的块级作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-的块级作用域","aria-hidden":"true"}},[this._v("#")]),this._v(" ES6 的块级作用域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("let")]),this._v("实际上为 JavaScript 新增了块级作用域。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面的函数有两个代码块，都声明了变量"),e("code",[this._v("n")]),this._v("，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用"),e("code",[this._v("var")]),this._v("定义变量"),e("code",[this._v("n")]),this._v("，最后输出的值才是 10。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("{{{{{let insane = 'Hello World'}}}}};\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("{{{{\n  {let insane = 'Hello World'}\n  console.log(insane); // 报错\n}}}};\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("{{{{\n  let insane = 'Hello World';\n  {let insane = 'Hello World'}\n}}}};\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"块级作用域与函数声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域与函数声明","aria-hidden":"true"}},[this._v("#")]),this._v(" 块级作用域与函数声明")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 情况一\nif (true) {\n  function f() {}\n}\n\n// 情况二\ntry {\n  function f() {}\n} catch(e) {\n  // ...\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于"),e("code",[this._v("let")]),this._v("，在块级作用域之外不可引用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("function f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码在 ES5 中运行，会得到“I am inside!”，因为在"),e("code",[this._v("if")]),this._v("内声明的函数"),e("code",[this._v("f")]),this._v("会被提升到函数头部，实际运行的代码如下。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// ES5 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  function f() { console.log('I am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ES6 就完全不一样了，理论上会得到“I am outside!”。因为块级作用域内声明的函数类似于"),e("code",[this._v("let")]),this._v("，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("允许在块级作用域内声明函数。")]),this._v(" "),e("li",[this._v("函数声明类似于"),e("code",[this._v("var")]),this._v("，即会提升到全局作用域或函数作用域的头部。")]),this._v(" "),e("li",[this._v("同时，函数声明还会提升到所在的块级作用域的头部。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作"),e("code",[this._v("let")]),this._v("处理。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("根据这三条规则，在浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于"),e("code",[this._v("var")]),this._v("声明的变量。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n    // 重复声明一次函数f\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 浏览器的 ES6 环境\nfunction f() { console.log('I am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n// Uncaught TypeError: f is not a function\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 函数声明语句\n{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n\n// 函数表达式\n{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 不报错\n'use strict';\nif (true) {\n  function f() {}\n}\n\n// 报错\n'use strict';\nif (true)\n  function f() {}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"const-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const-命令","aria-hidden":"true"}},[this._v("#")]),this._v(" const 命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"基本用法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本用法-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本用法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("const")]),this._v("声明一个只读的常量。一旦声明，常量的值就不能改变。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: Assignment to constant variable.\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("const")]),this._v("声明的变量不得改变值，这意味着，"),e("code",[this._v("const")]),this._v("一旦声明变量，就必须立即初始化，不能留到以后赋值。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const foo;\n// SyntaxError: Missing initializer in const declaration\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码表示，对于"),e("code",[this._v("const")]),this._v("来说，只声明不赋值，就会报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("const")]),this._v("的作用域与"),e("code",[this._v("let")]),this._v("命令相同：只在声明所在的块级作用域内有效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("if (true) {\n  const MAX = 5;\n}\n\nMAX // Uncaught ReferenceError: MAX is not defined\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("const")]),this._v("命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("if (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码在常量"),e("code",[this._v("MAX")]),this._v("声明之前就调用，结果报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("const")]),this._v("声明的常量，也与"),e("code",[this._v("let")]),this._v("一样不可重复声明。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('var message = "Hello!";\nlet age = 25;\n\n// 以下两行都会报错\nconst message = "Goodbye!";\nconst age = 30;\n\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"本质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本质","aria-hidden":"true"}},[this._v("#")]),this._v(" 本质")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("const")]),this._v("实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，"),e("code",[this._v("const")]),this._v("只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('const foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: "foo" is read-only\n\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，常量"),e("code",[this._v("foo")]),this._v("储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把"),e("code",[this._v("foo")]),this._v("指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const a = [];\na.push('Hello'); // 可执行\na.length = 0;    // 可执行\na = ['Dave'];    // 报错\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，常量"),e("code",[this._v("a")]),this._v("是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给"),e("code",[this._v("a")]),this._v("，就会报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果真的想将对象冻结，应该使用"),e("code",[this._v("Object.freeze")]),this._v("方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("const foo = Object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，常量"),e("code",[this._v("foo")]),this._v("指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var constantize = (obj) => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, i) => {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"es6-声明变量的六种方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6-声明变量的六种方法","aria-hidden":"true"}},[this._v("#")]),this._v(" ES6 声明变量的六种方法")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("ES5 只有两种声明变量的方法："),n("code",[t._v("var")]),t._v("命令和"),n("code",[t._v("function")]),t._v("命令。ES6 除了添加"),n("code",[t._v("let")]),t._v("和"),n("code",[t._v("const")]),t._v("命令，后面章节还会提到，另外两种声明变量的方法："),n("code",[t._v("import")]),t._v("命令和"),n("code",[t._v("class")]),t._v("命令。所以，ES6 一共有 6 种声明变量的方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"顶层对象的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#顶层对象的属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 顶层对象的属性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("顶层对象，在浏览器环境指的是"),e("code",[this._v("window")]),this._v("对象，在 Node 指的是"),e("code",[this._v("global")]),this._v("对象。ES5 之中，顶层对象的属性与全局变量是等价的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("window.a = 1;\na // 1\n\na = 2;\nwindow.a // 2\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，"),e("code",[this._v("window")]),this._v("对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("ES6 为了改变这一点，一方面规定，为了保持兼容性，"),n("code",[t._v("var")]),t._v("命令和"),n("code",[t._v("function")]),t._v("命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，"),n("code",[t._v("let")]),t._v("命令、"),n("code",[t._v("const")]),t._v("命令、"),n("code",[t._v("class")]),t._v("命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var a = 1;\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面代码中，全局变量"),n("code",[t._v("a")]),t._v("由"),n("code",[t._v("var")]),t._v("命令声明，所以它是顶层对象的属性；全局变量"),n("code",[t._v("b")]),t._v("由"),n("code",[t._v("let")]),t._v("命令声明，所以它不是顶层对象的属性，返回"),n("code",[t._v("undefined")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"global-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#global-对象","aria-hidden":"true"}},[this._v("#")]),this._v(" global 对象")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("浏览器里面，顶层对象是"),n("code",[t._v("window")]),t._v("，但 Node 和 Web Worker 没有"),n("code",[t._v("window")]),t._v("。")]),t._v(" "),n("li",[t._v("浏览器和 Web Worker 里面，"),n("code",[t._v("self")]),t._v("也指向顶层对象，但是 Node 没有"),n("code",[t._v("self")]),t._v("。")]),t._v(" "),n("li",[t._v("Node 里面，顶层对象是"),n("code",[t._v("global")]),t._v("，但其他环境都不支持。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用"),e("code",[this._v("this")]),this._v("变量，但是有局限性。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("全局环境中，"),n("code",[t._v("this")]),t._v("会返回顶层对象。但是，Node 模块和 ES6 模块中，"),n("code",[t._v("this")]),t._v("返回的是当前模块。")]),t._v(" "),n("li",[t._v("函数里面的"),n("code",[t._v("this")]),t._v("，如果函数不是作为对象的方法运行，而是单纯作为函数运行，"),n("code",[t._v("this")]),t._v("会指向顶层对象。但是，严格模式下，这时"),n("code",[t._v("this")]),t._v("会返回"),n("code",[t._v("undefined")]),t._v("。")]),t._v(" "),n("li",[t._v("不管是严格模式，还是普通模式，"),n("code",[t._v("new Function('return this')()")]),t._v("，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么"),n("code",[t._v("eval")]),t._v("、"),n("code",[t._v("new Function")]),t._v("这些方法都可能无法使用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 方法一\n(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &&\n      typeof require === 'function' &&\n      typeof global === 'object')\n     ? global\n     : this);\n\n// 方法二\nvar getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// CommonJS 的写法\nrequire('system.global/shim')();\n\n// ES6 模块的写法\nimport shim from 'system.global/shim'; shim();\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码可以保证各种环境里面，"),e("code",[this._v("global")]),this._v("对象都是存在的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// CommonJS 的写法\nvar global = require('system.global')();\n\n// ES6 模块的写法\nimport getGlobal from 'system.global';\nconst global = getGlobal();\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码将顶层对象放入变量"),e("code",[this._v("global")]),this._v("。")])}],!1,null,null,null);e.default=a.exports}}]);