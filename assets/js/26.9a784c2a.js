(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{175:function(e,r,t){"use strict";t.r(r);var o=t(0),n=Object(o.a)({},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),t("p",[e._v("Docker 包括三个基本概念")]),e._v(" "),e._m(1),e._v(" "),t("p",[e._v("理解了这三个概念，就理解了 Docker 的整个生命周期。")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),t("p",[e._v("Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),e._v(" "),e._m(4),e._v(" "),t("p",[e._v("因为镜像包含操作系统完整的 "),t("code",[e._v("root")]),e._v(" 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"}},[e._v("Union FS"),t("OutboundLink")],1),e._v(" 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。")]),e._v(" "),t("p",[e._v("镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。")]),e._v(" "),t("p",[e._v("分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。")]),e._v(" "),t("p",[e._v("关于镜像构建，将会在后续相关章节中做进一步的讲解。")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),t("p",[e._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"}},[e._v("命名空间"),t("OutboundLink")],1),e._v("。因此容器可以拥有自己的 "),t("code",[e._v("root")]),e._v(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),e._v(" "),e._m(7),e._v(" "),t("p",[e._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),e._v(" "),t("p",[e._v("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 "),t("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/data_management/volume.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("数据卷（Volume）"),t("OutboundLink")],1),e._v("、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。")]),e._v(" "),t("p",[e._v("数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。")]),e._v(" "),e._m(8),e._v(" "),t("p",[e._v("镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，"),t("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Registry"),t("OutboundLink")],1),e._v(" 就是这样的服务。")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),t("p",[e._v("以 "),t("a",{attrs:{href:"https://hub.docker.com/_/ubuntu",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubuntu 镜像"),t("OutboundLink")],1),e._v(" 为例，"),t("code",[e._v("ubuntu")]),e._v(" 是仓库的名字，其内包含有不同的版本标签，如，"),t("code",[e._v("16.04")]),e._v(", "),t("code",[e._v("18.04")]),e._v("。我们可以通过 "),t("code",[e._v("ubuntu:14.04")]),e._v("，或者 "),t("code",[e._v("ubuntu:18.04")]),e._v(" 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 "),t("code",[e._v("ubuntu")]),e._v("，那将视为 "),t("code",[e._v("ubuntu:latest")]),e._v("。")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),t("p",[e._v("Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。")]),e._v(" "),t("p",[e._v("最常使用的 Registry 公开服务是官方的 "),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),t("OutboundLink")],1),e._v("，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 "),t("a",{attrs:{href:"https://coreos.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CoreOS"),t("OutboundLink")],1),e._v(" 的 "),t("a",{attrs:{href:"https://quay.io/repository/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Quay.io"),t("OutboundLink")],1),e._v("，CoreOS 相关的镜像存储在这里；Google 的 "),t("a",{attrs:{href:"https://cloud.google.com/container-registry/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google Container Registry"),t("OutboundLink")],1),e._v("，"),t("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes"),t("OutboundLink")],1),e._v(" 的镜像使用的就是这个服务。")]),e._v(" "),t("p",[e._v("由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（"),t("code",[e._v("Registry Mirror")]),e._v("），这些镜像服务被称为"),t("strong",[e._v("加速器")]),e._v("。常见的有 "),t("a",{attrs:{href:"https://cr.console.aliyun.com/#/accelerator",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云加速器"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://www.daocloud.io/mirror#accelerator-doc",target:"_blank",rel:"noopener noreferrer"}},[e._v("DaoCloud 加速器"),t("OutboundLink")],1),e._v(" 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 "),t("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 Docker"),t("OutboundLink")],1),e._v(" 一节中有详细的配置方法。")]),e._v(" "),t("p",[e._v("国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 "),t("a",{attrs:{href:"https://hub.tenxcloud.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("时速云镜像仓库"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://c.163.com/hub#/m/library/",target:"_blank",rel:"noopener noreferrer"}},[e._v("网易云镜像服务"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://hub.daocloud.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("DaoCloud 镜像市场"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"https://cr.console.aliyun.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云镜像库"),t("OutboundLink")],1),e._v(" 等。")]),e._v(" "),e._m(13),e._v(" "),t("p",[e._v("除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 "),t("a",{attrs:{href:"https://hub.docker.com/_/registry/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Registry"),t("OutboundLink")],1),e._v("镜像，可以直接使用做为私有 Registry 服务。在 "),t("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("私有仓库"),t("OutboundLink")],1),e._v(" 一节中，会有进一步的搭建私有 Registry 服务的讲解。")]),e._v(" "),t("p",[e._v("开源的 Docker Registry 镜像只提供了 "),t("a",{attrs:{href:"https://docs.docker.com/registry/spec/api/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Registry API"),t("OutboundLink")],1),e._v(" 的服务端实现，足以支持 "),t("code",[e._v("docker")]),e._v(" 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 "),t("a",{attrs:{href:"https://docs.docker.com/datacenter/dtr/2.0/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Trusted Registry"),t("OutboundLink")],1),e._v(" 中，提供了这些高级功能。")]),e._v(" "),t("p",[e._v("除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，"),t("a",{attrs:{href:"https://github.com/goharbor/harbor",target:"_blank",rel:"noopener noreferrer"}},[e._v("VMWare Harbor"),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/repository/nexus3_registry.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sonatype Nexus"),t("OutboundLink")],1),e._v("。")])])},[function(){var e=this.$createElement,r=this._self._c||e;return r("h1",{attrs:{id:"docker基本概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker基本概念","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker基本概念")])},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ul",[t("li",[e._v("镜像（"),t("code",[e._v("Image")]),e._v("）")]),e._v(" "),t("li",[e._v("容器（"),t("code",[e._v("Container")]),e._v("）")]),e._v(" "),t("li",[e._v("仓库（"),t("code",[e._v("Repository")]),e._v("）")])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"docker-镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 镜像")])},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("p",[e._v("我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 "),t("code",[e._v("root")]),e._v(" 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 "),t("code",[e._v("root")]),e._v(" 文件系统。比如官方镜像 "),t("code",[e._v("ubuntu:18.04")]),e._v(" 就包含了完整的一套 Ubuntu 18.04 最小系统的 "),t("code",[e._v("root")]),e._v(" 文件系统。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"分层存储"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分层存储","aria-hidden":"true"}},[this._v("#")]),this._v(" 分层存储")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"docker-容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 容器")])},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("p",[e._v("镜像（"),t("code",[e._v("Image")]),e._v("）和容器（"),t("code",[e._v("Container")]),e._v("）的关系，就像是面向对象程序设计中的 "),t("code",[e._v("类")]),e._v(" 和 "),t("code",[e._v("实例")]),e._v(" 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为"),r("strong",[this._v("容器存储层")]),this._v("。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"docker-registry"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-registry","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker Registry")])},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("p",[e._v("一个 "),t("strong",[e._v("Docker Registry")]),e._v(" 中可以包含多个"),t("strong",[e._v("仓库")]),e._v("（"),t("code",[e._v("Repository")]),e._v("）；每个仓库可以包含多个"),t("strong",[e._v("标签")]),e._v("（"),t("code",[e._v("Tag")]),e._v("）；每个标签对应一个镜像。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 "),r("code",[this._v("<仓库名>:<标签>")]),this._v(" 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 "),r("code",[this._v("latest")]),this._v(" 作为默认标签。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[this._v("仓库名经常以 "),r("em",[this._v("两段式路径")]),this._v(" 形式出现，比如 "),r("code",[this._v("jwilder/nginx-proxy")]),this._v("，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"docker-registry-公开服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-registry-公开服务","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker Registry 公开服务")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h3",{attrs:{id:"私有-docker-registry"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#私有-docker-registry","aria-hidden":"true"}},[this._v("#")]),this._v(" 私有 Docker Registry")])}],!1,null,null,null);n.options.__file="BasicConcepts.md";r.default=n.exports}}]);