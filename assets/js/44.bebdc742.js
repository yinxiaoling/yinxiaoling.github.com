(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{193:function(t,e,s){"use strict";s.r(e);var r=s(0),a=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("Kubernetes 是 Google 团队发起的开源项目，它的目标是管理跨多个主机的容器，提供基本的部署，维护以及运用伸缩，主要实现语言为 Go 语言。Kubernetes 是：")]),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("Kubernetes 构建于 Google 数十年经验，一大半来源于 Google 生产环境规模的经验。结合了社区最佳的想法和实践。")]),t._v(" "),s("p",[t._v("在分布式系统中，部署，调度，伸缩一直是最为重要的也最为基础的功能。Kubernetes 就是希望解决这一序列问题的。")]),t._v(" "),s("p",[t._v("Kubernetes 目前在"),s("a",{attrs:{href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),s("OutboundLink")],1),t._v("进行维护。")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("虽然 Kubernetes 最初是为 GCE 定制的，但是在后续版本中陆续增加了其他云平台的支持，以及本地数据中心的支持。")]),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("目前，Kubernetes 支持在多种环境下的安装，包括本地主机（Fedora）、云服务（Google GAE、AWS 等）。然而最快速体验 Kubernetes 的方式显然是本地通过 Docker 的方式来启动相关进程。")]),t._v(" "),s("p",[t._v("下图展示了在单节点使用 Docker 快速部署一套 Kubernetes 的拓扑。")]),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("Kubernetes 依赖 Etcd 服务来维护所有主节点的状态。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),s("p",[t._v("启动 kubelet。")]),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._m(20),t._v(" "),s("p",[t._v("所有服务启动后，查看本地实际运行的 Docker 容器，有如下几个。")]),t._v(" "),t._m(21),s("p",[t._v("这些服务大概分为三类：主节点服务、工作节点服务和其它服务。")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),s("p",[t._v("容器状态用来描述节点的当前状态。现在，其中包含三个信息：")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),s("p",[t._v("节点并非 Kubernetes 创建，而是由云平台创建，或者就是物理机器、虚拟机。在 Kubernetes 中，节点仅仅是一条记录，节点创建之后，Kubernetes 会检查其是否可用。在 Kubernetes 中，节点用如下结构保存：")]),t._v(" "),t._m(41),s("p",[t._v("Kubernetes 校验节点可用依赖于 ID。在当前的版本中，有两个接口可以用来管理节点：节点控制和 Kube 管理。")]),t._v(" "),t._m(42),t._v(" "),s("p",[t._v("在 Kubernetes 主节点中，节点控制器是用来管理节点的组件。主要包含：")]),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),s("p",[t._v("在 Kubernetes 中，使用的最小单位是容器组，容器组是创建，调度，管理的最小单位。 一个容器组使用相同的 Docker 容器并共享卷（挂载点）。一个容器组是一个特定应用的打包集合，包含一个或多个容器。")]),t._v(" "),s("p",[t._v("和运行的容器类似，一个容器组被认为只有很短的运行周期。容器组被调度到一组节点运行，直到容器的生命周期结束或者其被删除。如果节点死掉，运行在其上的容器组将会被删除而不是重新调度。（也许在将来的版本中会添加容器组的移动）。")]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),s("p",[t._v("容器组主要是为了数据共享和它们之间的通信。")]),t._v(" "),s("p",[t._v("在一个容器组中，容器都使用相同的网络地址和端口，可以通过本地网络来相互通信。每个容器组都有独立的 IP，可用通过网络来和其他物理主机或者容器通信。")]),t._v(" "),s("p",[t._v("容器组有一组存储卷（挂载点），主要是为了让容器在重启之后可以不丢失数据。")]),t._v(" "),t._m(48),t._v(" "),s("p",[t._v("容器组是一个运用管理和部署的高层次抽象，同时也是一组容器的接口。容器组是部署、水平放缩的最小单位。")]),t._v(" "),t._m(49),t._v(" "),s("p",[t._v("容器组可以通过组合来构建复杂的运用，其本来的意义包含：")]),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),s("p",[t._v("为什么不在一个单一的容器里运行多个程序？")]),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),s("p",[t._v("容器组已经被节点接受，但有一个或多个容器还没有运行起来。这将包含某些节点正在下载镜像的时间，这种情形会依赖于网络情况。")]),t._v(" "),t._m(56),t._v(" "),s("p",[t._v("容器组已经被调度到节点，并且所有的容器都已经启动。至少有一个容器处于运行状态（或者处于重启状态）。")]),t._v(" "),t._m(57),t._v(" "),s("p",[t._v("所有的容器都正常退出。")]),t._v(" "),t._m(58),t._v(" "),s("p",[t._v("容器组中所有容器都意外中断了。")]),t._v(" "),t._m(59),t._v(" "),s("p",[t._v("通常来说，如果容器组被创建了就不会自动销毁，除非被某种行为触发，而触发此种情况可能是人为，或者复制控制器所为。唯一例外的是容器组由 succeeded 状态成功退出，或者在一定时间内重试多次依然失败。")]),t._v(" "),t._m(60),t._v(" "),s("p",[t._v("举例如下。")]),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer"}},[t._v("kubectl"),s("OutboundLink")],1),t._v(" 是 Kubernetes 自带的客户端，可以用它来直接操作 Kubernetes。")]),t._v(" "),s("p",[t._v("使用格式有两种：")]),t._v(" "),t._m(70),t._m(71),t._v(" "),s("p",[t._v("显示一个或多个资源")]),t._v(" "),t._m(72),t._v(" "),s("p",[t._v("显示资源详情")]),t._v(" "),t._m(73),t._v(" "),s("p",[t._v("从文件或标准输入创建资源")]),t._v(" "),t._m(74),t._v(" "),s("p",[t._v("从文件或标准输入更新资源")]),t._v(" "),t._m(75),t._v(" "),s("p",[t._v("通过文件名、标准输入、资源名或者 label selector 删除资源")]),t._v(" "),t._m(76),t._v(" "),s("p",[t._v("输出 pod 中一个容器的日志")]),t._v(" "),t._m(77),t._v(" "),s("p",[t._v("对指定的 replication controller 执行滚动升级")]),t._v(" "),t._m(78),t._v(" "),s("p",[t._v("在容器内部执行命令")]),t._v(" "),t._m(79),t._v(" "),s("p",[t._v("将本地端口转发到Pod")]),t._v(" "),t._m(80),t._v(" "),s("p",[t._v("为 Kubernetes API server 启动代理服务器")]),t._v(" "),t._m(81),t._v(" "),s("p",[t._v("在集群中使用指定镜像启动容器")]),t._v(" "),t._m(82),t._v(" "),s("p",[t._v("将 replication controller service 或 pod 暴露为新的 kubernetes service")]),t._v(" "),t._m(83),t._v(" "),s("p",[t._v("更新资源的 label")]),t._v(" "),t._m(84),t._v(" "),s("p",[t._v("修改 kubernetes 配置文件")]),t._v(" "),t._m(85),t._v(" "),s("p",[t._v("显示集群信息")]),t._v(" "),t._m(86),t._v(" "),s("p",[t._v('以 "组/版本" 的格式输出服务端支持的 API 版本')]),t._v(" "),t._m(87),t._v(" "),s("p",[t._v("输出服务端和客户端的版本信息")]),t._v(" "),t._m(88),t._v(" "),s("p",[t._v("显示各个命令的帮助信息")]),t._v(" "),t._m(89),t._v(" "),s("p",[t._v("任何优秀的项目都离不开优秀的架构设计。本小节将介绍 Kubernetes 在架构方面的设计考虑。")]),t._v(" "),t._m(90),t._v(" "),s("p",[t._v("如果让我们自己从头设计一套容器管理平台，有如下几个方面是很容易想到的：")]),t._v(" "),t._m(91),t._v(" "),t._m(92),t._v(" "),s("p",[t._v("下面这张图完整展示了 Kubernetes 的运行原理。")]),t._v(" "),t._m(93),t._v(" "),s("p",[t._v("可见，Kubernetes 首先是一套分布式系统，由多个节点组成，节点分为两类：一类是属于管理平面的主节点/控制节点（Master Node）；一类是属于运行平面的工作节点（Worker Node）。")]),t._v(" "),s("p",[t._v("显然，复杂的工作肯定都交给控制节点去做了，工作节点负责提供稳定的操作接口和能力抽象即可。")]),t._v(" "),s("p",[t._v("从这张图上，我们没有能发现 Kubernetes 中对于控制平面的分布式实现，但是由于数据后端自身就是一套分布式的数据库 Etcd，因此可以很容易扩展到分布式实现。")]),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),s("p",[t._v("主节点上需要提供如下的管理服务：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("apiserver")]),t._v(" 是整个系统的对外接口，提供一套 RESTful 的 "),s("a",{attrs:{href:"https://github.com/kubernetes/kubernetes/tree/master/docs/api-reference",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes API"),s("OutboundLink")],1),t._v("，供客户端和其它组件调用；")]),t._v(" "),t._m(96),t._v(" "),t._m(97)]),t._v(" "),t._m(98),t._v(" "),s("p",[t._v("这里 Etcd 即作为数据后端，又作为消息中间件。")]),t._v(" "),s("p",[t._v("通过 Etcd 来存储所有的主节点上的状态信息，很容易实现主节点的分布式扩展。")]),t._v(" "),s("p",[t._v("组件可以自动的去侦测 Etcd 中的数值变化来获得通知，并且获得更新后的数据来执行相应的操作。")]),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),t._m(101)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"kubernetes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes","aria-hidden":"true"}},[this._v("#")]),this._v(" Kubernetes")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Kubernetes")]),this._v(" 是 Google 团队发起并维护的基于 Docker 的开源容器集群管理系统，它不仅支持常见的云平台，而且支持内部数据中心。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("建于 Docker 之上的 "),s("code",[t._v("Kubernetes")]),t._v(" 可以构建一个容器的调度服务，其目的是让用户透过 "),s("code",[t._v("Kubernetes")]),t._v(" 集群来进行云端容器集群的管理，而无需用户进行复杂的设置工作。系统会自动选取合适的工作节点来执行具体的容器集群调度处理工作。其核心概念是 "),s("code",[t._v("Container Pod")]),t._v("。一个 "),s("code",[t._v("Pod")]),t._v(" 由一组工作于同一物理工作节点的容器构成。这些组容器拥有相同的网络命名空间、IP以及存储配额，也可以根据实际情况对每一个 "),s("code",[t._v("Pod")]),t._v(" 进行端口映射。此外，"),s("code",[t._v("Kubernetes")]),t._v(" 工作节点会由主系统进行管理，节点包含了能够运行 Docker 容器所用到的服务。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("本章将分为 5 节介绍 "),e("code",[this._v("Kubernetes")]),this._v("，包括")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("项目简介")]),t._v(" "),s("li",[t._v("快速入门")]),t._v(" "),s("li",[t._v("基本概念")]),t._v(" "),s("li",[t._v("实践例子")]),t._v(" "),s("li",[t._v("架构分析等高级话题")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"项目简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 项目简介")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://yeasy.gitbooks.io/docker_practice/kubernetes/_images/kubernetes_logo.png",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("易学：轻量级，简单，容易理解")]),this._v(" "),e("li",[this._v("便携：支持公有云，私有云，混合云，以及多种云平台")]),this._v(" "),e("li",[this._v("可拓展：模块化，可插拔，支持钩子，可任意组合")]),this._v(" "),e("li",[this._v("自修复：自动重调度，自动重启，自动复制")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"kubernetes-能够运行在任何地方！"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-能够运行在任何地方！","aria-hidden":"true"}},[this._v("#")]),this._v(" Kubernetes 能够运行在任何地方！")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"快速上手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速上手","aria-hidden":"true"}},[this._v("#")]),this._v(" 快速上手")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://yeasy.gitbooks.io/docker_practice/kubernetes/_images/k8s-singlenode-docker.png",alt:"在 Docker 中启动 Kubernetes"}}),this._v("图 1.21.2.1 - 在 Docker 中启动 Kubernetes")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"启动-etcd-服务。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动-etcd-服务。","aria-hidden":"true"}},[this._v("#")]),this._v(" 启动 Etcd 服务。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run --net"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host -d gcr.io/google_containers/etcd:2.0.9 /usr/local/bin/etcd --addr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("127.0.0.1:4001 --bind-addr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("0.0.0.0:4001 --data-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/var/etcd/data\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"启动主节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动主节点","aria-hidden":"true"}},[this._v("#")]),this._v(" 启动主节点")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run --net"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host -d -v /var/run/docker.sock:/var/run/docker.sock  gcr.io/google_containers/hyperkube:v0.17.0 /hyperkube kubelet --api_servers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http://localhost:8080 --v"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("2 --address"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("0.0.0.0 --enable_server --hostname_override"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("127.0.0.1 --config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/etc/kubernetes/manifests\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"启动服务代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动服务代理","aria-hidden":"true"}},[this._v("#")]),this._v(" 启动服务代理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("docker run -d --net"),e("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v("host --privileged gcr.io/google_containers/hyperkube:v0.17.0 /hyperkube proxy --master"),e("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v("http://127.0.0.1:8080 --v"),e("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v("2\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"测试状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试状态","aria-hidden":"true"}},[this._v("#")]),this._v(" 测试状态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在本地访问 "),e("code",[this._v("8080")]),this._v(" 端口，可以获取到如下的结果：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" 127.0.0.1:8080\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"paths"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api/v1beta1"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api/v1beta2"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api/v1beta3"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/healthz"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/healthz/ping"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/logs/"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/metrics"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/static/"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/swagger-ui/"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/swaggerapi/"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/validate"')]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/version"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"查看服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 查看服务")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("CONTAINER ID        IMAGE                                        COMMAND                CREATED             STATUS              PORTS               NAMES\nee054db2516c        gcr.io/google_containers/hyperkube:v0.17.0   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/hyperkube schedule   2 days ago          Up 1 days                               k8s_scheduler.509f29c9_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_e97037f5\n3b0f28de07a2        gcr.io/google_containers/hyperkube:v0.17.0   "')]),t._v("/hyperkube apiserve   2 days ago          Up 1 days                               k8s_apiserver.245e44fa_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_6ab5c23d\n2eaa44ecdd8e        gcr.io/google_containers/hyperkube:v0.17.0   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/hyperkube controll   2 days ago          Up 1 days                               k8s_controller-manager.33f83d43_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_1a60106f\n30aa7163cbef        gcr.io/google_containers/hyperkube:v0.17.0   "')]),t._v("/hyperkube proxy --   2 days ago          Up 1 days                               jolly_davinci\na2f282976d91        gcr.io/google_containers/pause:0.8.0         "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/pause"')]),t._v("               2 days ago          Up 2 days                               k8s_POD.e4cc795_k8s-master-127.0.0.1_default_9941e5170b4365bd4aa91f122ba0c061_e8085b1f\nc060c52acc36        gcr.io/google_containers/hyperkube:v0.17.0   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/hyperkube kubelet    2 days ago          Up 1 days                               serene_nobel\ncc3cd263c581        gcr.io/google_containers/etcd:2.0.9          "')]),t._v("/usr/local/bin/etcd   2 days ago          Up 1 days                               happy_turing\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"主节点服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主节点服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 主节点服务")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v("apiserver")]),t._v(" 是整个系统的对外接口，提供 RESTful 方式供客户端和其它组件调用；")]),t._v(" "),s("li",[s("code",[t._v("scheduler")]),t._v(" 负责对资源进行调度，分配某个 pod 到某个节点上；")]),t._v(" "),s("li",[s("code",[t._v("controller-manager")]),t._v(" 负责管理控制器，包括 endpoint-controller（刷新服务和 pod 的关联信息）和 replication-controller（维护某个 pod 的复制为配置的数值）。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"工作节点服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作节点服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 工作节点服务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("kubelet")]),this._v(" 是工作节点执行操作的 agent，负责具体的容器生命周期管理，根据从数据库中获取的信息来管理容器，并上报 pod 运行状态等；")]),this._v(" "),e("li",[e("code",[this._v("proxy")]),this._v(" 为 pod 上的服务提供访问的代理。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"其它服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其它服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 其它服务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Etcd 是所有状态的存储数据库；")]),this._v(" "),e("li",[e("code",[this._v("gcr.io/google_containers/pause:0.8.0")]),this._v(" 是 Kubernetes 启动后自动 pull 下来的测试镜像。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://yeasy.gitbooks.io/docker_practice/kubernetes/_images/kubernetes_design.jpg",alt:"img"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("节点（"),s("code",[t._v("Node")]),t._v("）：一个节点是一个运行 Kubernetes 中的主机。")]),t._v(" "),s("li",[t._v("容器组（"),s("code",[t._v("Pod")]),t._v("）：一个 Pod 对应于由若干容器组成的一个容器组，同个组内的容器共享一个存储卷(volume)。")]),t._v(" "),s("li",[t._v("容器组生命周期（"),s("code",[t._v("pos-states")]),t._v("）：包含所有容器状态集合，包括容器组状态类型，容器组生命周期，事件，重启策略，以及 replication controllers。")]),t._v(" "),s("li",[t._v("Replication Controllers：主要负责指定数量的 pod 在同一时间一起运行。")]),t._v(" "),s("li",[t._v("服务（"),s("code",[t._v("services")]),t._v("）：一个 Kubernetes 服务是容器组逻辑的高级抽象，同时也对外提供访问容器组的策略。")]),t._v(" "),s("li",[t._v("卷（"),s("code",[t._v("volumes")]),t._v("）：一个卷就是一个目录，容器对其有访问权限。")]),t._v(" "),s("li",[t._v("标签（"),s("code",[t._v("labels")]),t._v("）：标签是用来连接一组对象的，比如容器组。标签可以被用来组织和选择子对象。")]),t._v(" "),s("li",[t._v("接口权限（"),s("code",[t._v("accessing_the_api")]),t._v("）：端口，IP 地址和代理的防火墙规则。")]),t._v(" "),s("li",[t._v("web 界面（"),s("code",[t._v("ux")]),t._v("）：用户可以通过 web 界面操作 Kubernetes。")]),t._v(" "),s("li",[t._v("命令行操作（"),s("code",[t._v("cli")]),t._v("）："),s("code",[t._v("kubecfg")]),t._v("命令。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点","aria-hidden":"true"}},[this._v("#")]),this._v(" 节点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 "),e("code",[this._v("Kubernetes")]),this._v(" 中，节点是实际工作的点，节点可以是虚拟机或者物理机器，依赖于一个集群环境。每个节点都有一些必要的服务以运行容器组，并且它们都可以通过主节点来管理。必要服务包括 Docker，kubelet 和代理服务。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"容器状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器状态","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器状态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"主机ip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主机ip","aria-hidden":"true"}},[this._v("#")]),this._v(" 主机IP")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("主机 IP 需要云平台来查询，"),e("code",[this._v("Kubernetes")]),this._v(" 把它作为状态的一部分来保存。如果 "),e("code",[this._v("Kubernetes")]),this._v(" 没有运行在云平台上，节点 ID 就是必需的。IP 地址可以变化，并且可以包含多种类型的 IP 地址，如公共 IP，私有 IP，动态 IP，ipv6 等等。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"节点周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 节点周期")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("通常来说节点有 "),s("code",[t._v("Pending")]),t._v("，"),s("code",[t._v("Running")]),t._v("，"),s("code",[t._v("Terminated")]),t._v(" 三个周期，如果 Kubernetes 发现了一个节点并且其可用，那么 Kubernetes 就把它标记为 "),s("code",[t._v("Pending")]),t._v("。然后在某个时刻，Kubernetes 将会标记其为 "),s("code",[t._v("Running")]),t._v("。节点的结束周期称为 "),s("code",[t._v("Terminated")]),t._v("。一个已经 "),s("code",[t._v("Terminated")]),t._v(" 的节点不会接受和调度任何请求，并且已经在其上运行的容器组也会删除。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"节点状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点状态","aria-hidden":"true"}},[this._v("#")]),this._v(" 节点状态")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("节点的状态主要是用来描述处于 "),s("code",[t._v("Running")]),t._v(" 的节点。当前可用的有 "),s("code",[t._v("NodeReachable")]),t._v(" 和 "),s("code",[t._v("NodeReady")]),t._v("。以后可能会增加其他状态。"),s("code",[t._v("NodeReachable")]),t._v(" 表示集群可达。"),s("code",[t._v("NodeReady")]),t._v(" 表示 kubelet 返回 Status Ok 并且 HTTP 状态检查健康。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"节点管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点管理","aria-hidden":"true"}},[this._v("#")]),this._v(" 节点管理")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.1.2.3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"kind"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Minion"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"apiVersion"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"v1beta1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"resources"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"capacity"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"cpu"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"memory"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1073741824")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"labels"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my-first-k8s-node"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"节点控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#节点控制","aria-hidden":"true"}},[this._v("#")]),this._v(" 节点控制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("集群范围内节点同步")]),this._v(" "),e("li",[this._v("单节点生命周期管理")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("节点控制有一个同步轮寻，主要监听所有云平台的虚拟实例，会根据节点状态创建和删除。可以通过 "),s("code",[t._v("--node_sync_period")]),t._v("标志来控制该轮寻。如果一个实例已经创建，节点控制将会为其创建一个结构。同样的，如果一个节点被删除，节点控制也会删除该结构。在 Kubernetes 启动时可用通过 "),s("code",[t._v("--machines")]),t._v("标记来显示指定节点。同样可以使用 "),s("code",[t._v("kubectl")]),t._v(" 来一条一条的添加节点，两者是相同的。通过设置 "),s("code",[t._v("--sync_nodes=false")]),t._v("标记来禁止集群之间的节点同步，你也可以使用 api/kubectl 命令行来增删节点。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"容器组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器组","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器组")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"容器组设计的初衷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器组设计的初衷","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器组设计的初衷")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"资源共享和通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资源共享和通信","aria-hidden":"true"}},[this._v("#")]),this._v(" 资源共享和通信")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"容器组管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器组管理","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器组管理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"容器组的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器组的使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器组的使用")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("内容管理，文件和数据加载以及本地缓存管理等。")]),t._v(" "),s("li",[t._v("日志和检查点备份，压缩，快照等。")]),t._v(" "),s("li",[t._v("监听数据变化，跟踪日志，日志和监控代理，消息发布等。")]),t._v(" "),s("li",[t._v("代理，网桥")]),t._v(" "),s("li",[t._v("控制器，管理，配置以及更新")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"替代方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#替代方案","aria-hidden":"true"}},[this._v("#")]),this._v(" 替代方案")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("1.透明化。为了使容器组中的容器保持一致的基础设施和服务，比如进程管理和资源监控。这样设计是为了用户的便利性。")]),this._v(" "),e("li",[this._v("2.解偶软件之间的依赖。每个容器都可能重新构建和发布，Kubernetes 必须支持热发布和热更新（将来）。")]),this._v(" "),e("li",[this._v("3.方便使用。用户不必运行独立的程序管理，也不用担心每个运用程序的退出状态。")]),this._v(" "),e("li",[this._v("4.高效。考虑到基础设施有更多的职责，容器必须要轻量化。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"容器组的生命状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器组的生命状态","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器组的生命状态")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("包括若干状态值："),s("code",[t._v("pending")]),t._v("、"),s("code",[t._v("running")]),t._v("、"),s("code",[t._v("succeeded")]),t._v("、"),s("code",[t._v("failed")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"pending"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pending","aria-hidden":"true"}},[this._v("#")]),this._v(" pending")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"running"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running","aria-hidden":"true"}},[this._v("#")]),this._v(" running")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"succeeded"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#succeeded","aria-hidden":"true"}},[this._v("#")]),this._v(" succeeded")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"failed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#failed","aria-hidden":"true"}},[this._v("#")]),this._v(" failed")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"容器组生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器组生命周期","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器组生命周期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果某个节点死掉或者不能连接，那么节点控制器将会标记其上的容器组的状态为 "),e("code",[this._v("failed")]),this._v("。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("容器组状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("running\n")])])]),s("p",[t._v("，有 1 容器，容器正常退出")]),t._v(" "),s("ul",[s("li",[t._v("记录完成事件")]),t._v(" "),s("li",[t._v("如果重启策略为：\n"),s("ul",[s("li",[t._v("始终：重启容器，容器组保持 "),s("code",[t._v("running")])]),t._v(" "),s("li",[t._v("失败时：容器组变为 "),s("code",[t._v("succeeded")])]),t._v(" "),s("li",[t._v("从不：容器组变为 "),s("code",[t._v("succeeded")])])])])])]),t._v(" "),s("li",[s("p",[t._v("容器组状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("running\n")])])]),s("p",[t._v("，有1容器，容器异常退出")]),t._v(" "),s("ul",[s("li",[t._v("记录失败事件")]),t._v(" "),s("li",[t._v("如果重启策略为：\n"),s("ul",[s("li",[t._v("始终：重启容器，容器组保持 "),s("code",[t._v("running")])]),t._v(" "),s("li",[t._v("失败时：重启容器，容器组保持 "),s("code",[t._v("running")])]),t._v(" "),s("li",[t._v("从不：容器组变为 "),s("code",[t._v("failed")])])])])])]),t._v(" "),s("li",[s("p",[t._v("容器组状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("running\n")])])]),s("p",[t._v("，有2容器，有1容器异常退出")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("记录失败事件")])]),t._v(" "),s("li",[s("p",[t._v("如果重启策略为：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("始终：重启容器，容器组保持 "),s("code",[t._v("running")])])]),t._v(" "),s("li",[s("p",[t._v("失败时：重启容器，容器组保持 "),s("code",[t._v("running")])])]),t._v(" "),s("li",[s("p",[t._v("从不：容器组保持")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("running\n")])])]),s("ul",[s("li",[t._v("当有2容器退出")])])]),t._v(" "),s("li",[s("p",[t._v("记录失败事件")])]),t._v(" "),s("li",[s("p",[t._v("如果重启策略为：")]),t._v(" "),s("ul",[s("li",[t._v("始终：重启容器，容器组保持 "),s("code",[t._v("running")])]),t._v(" "),s("li",[t._v("失败时：重启容器，容器组保持 "),s("code",[t._v("running")])]),t._v(" "),s("li",[t._v("从不：容器组变为 "),s("code",[t._v("failed")])])])])])])])]),t._v(" "),s("li",[s("p",[t._v("容器组状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("running\n")])])]),s("p",[t._v("，容器内存不足")]),t._v(" "),s("ul",[s("li",[t._v("标记容器错误中断")]),t._v(" "),s("li",[t._v("记录内存不足事件")]),t._v(" "),s("li",[t._v("如果重启策略为：\n"),s("ul",[s("li",[t._v("始终：重启容器，容器组保持 "),s("code",[t._v("running")])]),t._v(" "),s("li",[t._v("失败时：重启容器，容器组保持 "),s("code",[t._v("running")])]),t._v(" "),s("li",[t._v("从不：记录错误事件，容器组变为 "),s("code",[t._v("failed")])])])])])]),t._v(" "),s("li",[s("p",[t._v("容器组状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("running\n")])])]),s("p",[t._v("，一块磁盘死掉")]),t._v(" "),s("ul",[s("li",[t._v("杀死所有容器")]),t._v(" "),s("li",[t._v("记录事件")]),t._v(" "),s("li",[t._v("容器组变为 "),s("code",[t._v("failed")])]),t._v(" "),s("li",[t._v("如果容器组运行在一个控制器下，容器组将会在其他地方重新创建")])])]),t._v(" "),s("li",[s("p",[t._v("容器组状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("running\n")])])]),s("p",[t._v("，对应的节点段溢出")]),t._v(" "),s("ul",[s("li",[t._v("节点控制器等到超时")]),t._v(" "),s("li",[t._v("节点控制器标记容器组 "),s("code",[t._v("failed")])]),t._v(" "),s("li",[t._v("如果容器组运行在一个控制器下，容器组将会在其他地方重新创建")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"replication-controllers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#replication-controllers","aria-hidden":"true"}},[this._v("#")]),this._v(" Replication Controllers")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 服务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#卷","aria-hidden":"true"}},[this._v("#")]),this._v(" 卷")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签","aria-hidden":"true"}},[this._v("#")]),this._v(" 标签")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"接口权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口权限","aria-hidden":"true"}},[this._v("#")]),this._v(" 接口权限")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"web界面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web界面","aria-hidden":"true"}},[this._v("#")]),this._v(" web界面")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"命令行操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令行操作","aria-hidden":"true"}},[this._v("#")]),this._v(" 命令行操作")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"kubectl-使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kubectl-使用","aria-hidden":"true"}},[this._v("#")]),this._v(" kubectl 使用")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("kubectl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nkubectl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"get"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get","aria-hidden":"true"}},[this._v("#")]),this._v(" get")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"describe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#describe","aria-hidden":"true"}},[this._v("#")]),this._v(" describe")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"create"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create","aria-hidden":"true"}},[this._v("#")]),this._v(" create")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"update"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update","aria-hidden":"true"}},[this._v("#")]),this._v(" update")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete","aria-hidden":"true"}},[this._v("#")]),this._v(" delete")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#log","aria-hidden":"true"}},[this._v("#")]),this._v(" log")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"rolling-update"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rolling-update","aria-hidden":"true"}},[this._v("#")]),this._v(" rolling-update")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exec","aria-hidden":"true"}},[this._v("#")]),this._v(" exec")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"port-forward"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#port-forward","aria-hidden":"true"}},[this._v("#")]),this._v(" port-forward")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"proxy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proxy","aria-hidden":"true"}},[this._v("#")]),this._v(" proxy")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run","aria-hidden":"true"}},[this._v("#")]),this._v(" run")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"expose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expose","aria-hidden":"true"}},[this._v("#")]),this._v(" expose")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"label"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#label","aria-hidden":"true"}},[this._v("#")]),this._v(" label")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"config"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#config","aria-hidden":"true"}},[this._v("#")]),this._v(" config")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cluster-info"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cluster-info","aria-hidden":"true"}},[this._v("#")]),this._v(" cluster-info")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"api-versions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api-versions","aria-hidden":"true"}},[this._v("#")]),this._v(" api-versions")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"version"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#version","aria-hidden":"true"}},[this._v("#")]),this._v(" version")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"help"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#help","aria-hidden":"true"}},[this._v("#")]),this._v(" help")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基本架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本架构","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本架构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"基本考虑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本考虑","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本考虑")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("分布式架构，保证扩展性；")]),this._v(" "),e("li",[this._v("逻辑集中式的控制平面 + 物理分布式的运行平面；")]),this._v(" "),e("li",[this._v("一套资源调度系统，管理哪个容器该分配到哪个节点上；")]),this._v(" "),e("li",[this._v("一套对容器内服务进行抽象和 HA 的系统。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"运行原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行原理","aria-hidden":"true"}},[this._v("#")]),this._v(" 运行原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://yeasy.gitbooks.io/docker_practice/kubernetes/_images/k8s_architecture.png",alt:"Kubernetes 架构"}}),this._v("图 1.21.5.1 - Kubernetes 架构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"控制平面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制平面","aria-hidden":"true"}},[this._v("#")]),this._v(" 控制平面")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"主节点服务-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主节点服务-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 主节点服务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("code",[this._v("scheduler")]),this._v(" 负责对资源进行调度，分配某个 pod 到某个节点上。是 pluggable 的，意味着很容易选择其它实现方式；")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("code",[this._v("controller-manager")]),this._v(" 负责管理控制器，包括 endpoint-controller（刷新服务和 pod 的关联信息）和 replication-controller（维护某个 pod 的复制为配置的数值）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"etcd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etcd","aria-hidden":"true"}},[this._v("#")]),this._v(" Etcd")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"工作节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作节点","aria-hidden":"true"}},[this._v("#")]),this._v(" 工作节点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("kubelet 是工作节点执行操作的 agent，负责具体的容器生命周期管理，根据从数据库中获取的信息来管理容器，并上报 pod 运行状态等；")]),this._v(" "),e("li",[this._v("kube-proxy 是一个简单的网络访问代理，同时也是一个 Load Balancer。它负责将访问到某个服务的请求具体分配给工作节点上的 Pod（同一类标签）。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://yeasy.gitbooks.io/docker_practice/kubernetes/_images/kube-proxy.png",alt:"Proxy 代理对服务的请求"}}),this._v("图 1.21.5.2 - Proxy 代理对服务的请求")])}],!1,null,null,null);a.options.__file="kubernetes.md";e.default=a.exports}}]);