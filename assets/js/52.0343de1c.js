(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{201:function(t,e,s){"use strict";s.r(e);var r=s(0),n=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("Docker 底层的核心技术包括 Linux 上的命名空间（Namespaces）、控制组（Control groups）、Union 文件系统（Union file systems）和容器格式（Container format）。")]),t._v(" "),s("p",[t._v("我们知道，传统的虚拟机通过在宿主主机中运行 hypervisor 来模拟一整套完整的硬件环境提供给虚拟机的操作系统。虚拟机系统看到的环境是可限制的，也是彼此隔离的。 这种直接的做法实现了对资源最完整的封装，但很多时候往往意味着系统资源的浪费。 例如，以宿主机和虚拟机系统都为 Linux 系统为例，虚拟机中运行的应用其实可以利用宿主机系统中的运行环境。")]),t._v(" "),s("p",[t._v("我们知道，在操作系统中，包括内核、文件系统、网络、PID、UID、IPC、内存、硬盘、CPU 等等，所有的资源都是应用进程直接共享的。 要想实现虚拟化，除了要实现对内存、CPU、网络IO、硬盘IO、存储空间等的限制外，还要实现文件系统、网络、PID、UID、IPC等等的相互隔离。 前者相对容易实现一些，后者则需要宿主机系统的深入支持。")]),t._v(" "),s("p",[t._v("随着 Linux 系统对于命名空间功能的完善实现，程序员已经可以实现上面的所有需求，让某些进程在彼此隔离的命名空间中运行。大家虽然都共用一个内核和某些运行时环境（例如一些系统命令和系统库），但是彼此却看不到，都以为系统中只有自己的存在。这种机制就是容器（Container），利用命名空间来做权限的隔离控制，利用 cgroups 来做资源分配。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("Docker 守护进程一般在宿主主机后台运行，等待接收来自客户端的消息。")]),t._v(" "),s("p",[t._v("Docker 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟 Docker 守护进程交互。")]),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("命名空间是 Linux 内核一个强大的特性。每个容器都有自己单独的命名空间，运行在其中的应用都像是在独立的操作系统中运行一样。命名空间保证了容器之间彼此互不影响。")]),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("不同用户的进程就是通过 pid 命名空间隔离开的，且不同命名空间中可以有相同 pid。所有的 LXC 进程在 Docker 中的父进程为Docker进程，每个 LXC 进程具有不同的命名空间。同时由于允许嵌套，因此可以很方便的实现嵌套的 Docker 容器。")]),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("有了 pid 命名空间, 每个命名空间中的 pid 能够相互隔离，但是网络端口还是共享 host 的端口。网络隔离是通过 net 命名空间实现的， 每个 net 命名空间有独立的 网络设备, IP 地址, 路由表, /proc/net 目录。这样每个容器的网络就能隔离开来。Docker 默认采用 veth 的方式，将容器中的虚拟网卡同 host 上的一 个Docker 网桥 docker0 连接在一起。")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("容器中进程交互还是采用了 Linux 常见的进程间交互方法(interprocess communication - IPC), 包括信号量、消息队列和共享内存等。然而同 VM 不同的是，容器的进程间交互实际上还是 host 上具有相同 pid 命名空间中的进程间交互，因此需要在 IPC 资源申请时加入命名空间信息，每个 IPC 资源有一个唯一的 32 位 id。")]),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("类似 chroot，将一个进程放到一个特定的目录执行。mnt 命名空间允许不同命名空间的进程看到的文件结构不同，这样每个命名空间 中的进程所看到的文件目录就被隔离开了。同 chroot 不同，每个命名空间中的容器在 /proc/mounts 的信息只包含所在命名空间的 mount point。")]),t._v(" "),t._m(10),t._v(" "),s("p",[t._v('UTS("UNIX Time-sharing System") 命名空间允许每个容器拥有独立的 hostname 和 domain name, 使其在网络上可以被视作一个独立的节点而非 主机上的一个进程。')]),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("每个容器可以有不同的用户和组 id, 也就是说可以在容器内用容器内部的用户执行程序而非主机上的用户。")]),t._v(" "),s("p",[t._v("*注：更多关于 Linux 上命名空间的信息，请阅读 "),s("a",{attrs:{href:"https://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章"),s("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(12),t._v(" "),s("p",[t._v("控制组（"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cgroups",target:"_blank",rel:"noopener noreferrer"}},[t._v("cgroups"),s("OutboundLink")],1),t._v("）是 Linux 内核的一个特性，主要用来对共享资源进行隔离、限制、审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时的对系统资源的竞争。")]),t._v(" "),s("p",[t._v("控制组技术最早是由 Google 的程序员在 2006 年提出，Linux 内核自 2.6.24 开始支持。")]),t._v(" "),s("p",[t._v("控制组可以提供对容器的内存、CPU、磁盘 IO 等资源的限制和审计管理。")]),t._v(" "),t._m(13),t._v(" "),s("p",[t._v("联合文件系统（"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/UnionFS",target:"_blank",rel:"noopener noreferrer"}},[t._v("UnionFS"),s("OutboundLink")],1),t._v("）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。")]),t._v(" "),s("p",[t._v("联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。")]),t._v(" "),s("p",[t._v("另外，不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),s("p",[t._v("各 Linux 发行版 Docker 推荐使用的存储驱动如下表。")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),s("p",[t._v("最初，Docker 采用了 "),s("code",[t._v("LXC")]),t._v(" 中的容器格式。从 0.7 版本以后开始去除 LXC，转而使用自行开发的 "),s("a",{attrs:{href:"https://github.com/docker/libcontainer",target:"_blank",rel:"noopener noreferrer"}},[t._v("libcontainer"),s("OutboundLink")],1),t._v("，从 1.11 开始，则进一步演进为使用 "),s("a",{attrs:{href:"https://github.com/opencontainers/runc",target:"_blank",rel:"noopener noreferrer"}},[t._v("runC"),s("OutboundLink")],1),t._v(" 和 "),s("a",{attrs:{href:"https://containerd.tools/",target:"_blank",rel:"noopener noreferrer"}},[t._v("containerd"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("对更多容器格式的支持，还在进一步的发展中。")]),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("Docker 的网络实现其实就是利用了 Linux 上的网络命名空间和虚拟网络设备（特别是 veth pair）。建议先熟悉了解这两部分的基本概念再阅读本章。")]),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("首先，要实现网络通信，机器需要至少一个网络接口（物理接口或虚拟接口）来收发数据包；此外，如果不同子网之间要进行通信，需要路由机制。")]),t._v(" "),s("p",[t._v("Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。 Linux 通过在内核中进行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),s("p",[t._v("Docker 创建一个容器的时候，会执行如下操作：")]),t._v(" "),t._m(23),t._v(" "),s("p",[t._v("完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络。")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),s("p",[t._v("在本地主机查找容器的进程 id，并为它创建网络命名空间。")]),t._v(" "),t._m(30),s("p",[t._v("检查桥接网卡的 IP 和子网掩码信息。")]),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),s("p",[t._v("将B放到容器的网络命名空间，命名为 eth0，启动它并配置一个可用 IP（桥接网段）和默认网关。")]),t._v(" "),t._m(34),s("p",[t._v("以上，就是 Docker 配置网络的具体过程。")]),t._v(" "),t._m(35),t._v(" "),t._m(36)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"底层实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#底层实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 底层实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基本架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本架构","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本架构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Docker 采用了 "),e("code",[this._v("C/S")]),this._v(" 架构，包括客户端和服务端。Docker 守护进程 （"),e("code",[this._v("Daemon")]),this._v("）作为服务端接受来自客户端的请求，并处理这些请求（创建、运行、分发容器）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("客户端和服务端既可以运行在一个机器上，也可通过 "),e("code",[this._v("socket")]),this._v(" 或者 "),e("code",[this._v("RESTful API")]),this._v(" 来进行通信。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://yeasy.gitbooks.io/docker_practice/underly/_images/docker_arch.png",alt:"Docker 基本架构"}}),this._v("图 1.18.1.1 - Docker 基本架构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名空间","aria-hidden":"true"}},[this._v("#")]),this._v(" 命名空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"pid-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pid-命名空间","aria-hidden":"true"}},[this._v("#")]),this._v(" pid 命名空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"net-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#net-命名空间","aria-hidden":"true"}},[this._v("#")]),this._v(" net 命名空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"ipc-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ipc-命名空间","aria-hidden":"true"}},[this._v("#")]),this._v(" ipc 命名空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"mnt-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mnt-命名空间","aria-hidden":"true"}},[this._v("#")]),this._v(" mnt 命名空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"uts-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uts-命名空间","aria-hidden":"true"}},[this._v("#")]),this._v(" uts 命名空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"user-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#user-命名空间","aria-hidden":"true"}},[this._v("#")]),this._v(" user 命名空间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"控制组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制组","aria-hidden":"true"}},[this._v("#")]),this._v(" 控制组")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"联合文件系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联合文件系统","aria-hidden":"true"}},[this._v("#")]),this._v(" 联合文件系统")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Docker 中使用的 AUFS（AnotherUnionFS）就是一种联合文件系统。 "),e("code",[this._v("AUFS")]),this._v(" 支持为每一个成员目录（类似 Git 的分支）设定只读（readonly）、读写（readwrite）和写出（whiteout-able）权限, 同时 "),e("code",[this._v("AUFS")]),this._v(" 里有一个类似分层的概念, 对只读权限的分支可以逻辑上进行增量地修改(不影响只读部分的)。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Docker 目前支持的联合文件系统包括 "),s("code",[t._v("OverlayFS")]),t._v(", "),s("code",[t._v("AUFS")]),t._v(", "),s("code",[t._v("Btrfs")]),t._v(", "),s("code",[t._v("VFS")]),t._v(", "),s("code",[t._v("ZFS")]),t._v(" 和 "),s("code",[t._v("Device Mapper")]),t._v("。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("Linux 发行版")]),t._v(" "),s("th",[t._v("Docker 推荐使用的存储驱动")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Docker CE on Ubuntu")]),t._v(" "),s("td",[s("code",[t._v("overlay2")]),t._v(" (Ubuntu 14.04.4 +, 16.04 +)")])]),t._v(" "),s("tr",[s("td",[t._v("Docker CE on Debian")]),t._v(" "),s("td",[s("code",[t._v("overlay2")]),t._v(" (Debian Stretch), "),s("code",[t._v("aufs")]),t._v(", "),s("code",[t._v("devicemapper")])])]),t._v(" "),s("tr",[s("td",[t._v("Docker CE on CentOS")]),t._v(" "),s("td",[s("code",[t._v("overlay2")])])]),t._v(" "),s("tr",[s("td",[t._v("Docker CE on Fedora")]),t._v(" "),s("td",[s("code",[t._v("overlay2")])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在可能的情况下，推荐使用 "),e("code",[this._v("overlay2")]),this._v(" 存储驱动，"),e("code",[this._v("overlay2")]),this._v(" 是目前 Docker 默认的存储驱动，以前则是 "),e("code",[this._v("aufs")]),this._v("。你可以通过配置来使用以上提到的其他类型的存储驱动。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"容器格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器格式","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器格式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"docker-网络实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络实现","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 网络实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"基本原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本原理","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本原理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Docker 容器网络就利用了这项技术。它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通（这样的一对接口叫做 "),e("code",[this._v("veth pair")]),this._v("）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"创建网络参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建网络参数","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建网络参数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("创建一对虚拟接口，分别放到本地主机和新容器中；")]),this._v(" "),e("li",[this._v("本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 veth65f9；")]),this._v(" "),e("li",[this._v("容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的命名空间可见；")]),this._v(" "),e("li",[this._v("从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 veth65f9。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以在 "),e("code",[this._v("docker run")]),this._v(" 的时候通过 "),e("code",[this._v("--net")]),this._v(" 参数来指定容器的网络配置，有4个可选值：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("code",[t._v("--net=bridge")]),t._v(" 这个是默认值，连接到默认的网桥。")]),t._v(" "),s("li",[s("code",[t._v("--net=host")]),t._v(" 告诉 Docker 不要将容器网络放到隔离的命名空间中，即不要容器化容器内的网络。此时容器使用本地主机的网络，它拥有完全的本地主机接口访问权限。容器进程可以跟主机其它 root 进程一样可以打开低范围的端口，可以访问本地网络服务比如 D-bus，还可以让容器做一些影响整个主机系统的事情，比如重启主机。因此使用这个选项的时候要非常小心。如果进一步的使用 "),s("code",[t._v("--privileged=true")]),t._v("，容器会被允许直接配置主机的网络堆栈。")]),t._v(" "),s("li",[s("code",[t._v("--net=container:NAME_or_ID")]),t._v(" 让 Docker 将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享 IP 地址和端口等网络资源，两者进程可以直接通过 "),s("code",[t._v("lo")]),t._v(" 环回接口通信。")]),t._v(" "),s("li",[s("code",[t._v("--net=none")]),t._v(" 让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配置。之后，用户可以自己进行配置。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"网络配置细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络配置细节","aria-hidden":"true"}},[this._v("#")]),this._v(" 网络配置细节")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("用户使用 "),e("code",[this._v("--net=none")]),this._v(" 后，可以自行配置网络，让容器达到跟平常一样具有访问网络的权限。通过这个过程，可以了解 Docker 配置网络的细节。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("首先，启动一个 "),e("code",[this._v("/bin/bash")]),this._v(" 容器，指定 "),e("code",[this._v("--net=none")]),this._v(" 参数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[this._v("docker run -i -t --rm --net"),e("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v("none base /bin/bash\nroot@63f36fc01b5f:/"),e("span",{pre:!0,attrs:{class:"token comment"}},[this._v("#")]),this._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("docker inspect -f "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{{.State.Pid}}'")]),t._v(" 63f36fc01b5f\n2778\npid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("2778\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /var/run/netns\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" -s /proc/"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v("/ns/net /var/run/netns/"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[this._v("ip addr show docker0\n21: docker0: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("..")]),this._v(".\ninet 172.17.42.1/16 scope global docker0\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("..")]),this._v(".\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("创建一对 “veth pair” 接口 A 和 B，绑定 A 到网桥 "),e("code",[this._v("docker0")]),this._v("，并启用它")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v(" add A "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),t._v(" veth peer name B\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" brctl addif docker0 A\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" A up\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" B netns "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ip netns "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v(" ip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" dev B name eth0\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ip netns "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v(" ip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" eth0 up\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ip netns "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v(" ip addr add 172.17.42.99/16 dev eth0\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ip netns "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v(" ip route add default via 172.17.42.1\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当容器结束后，Docker 会清空容器，容器内的 eth0 会随网络命名空间一起被清除，A 接口也被自动从 "),e("code",[this._v("docker0")]),this._v(" 卸载。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("此外，用户可以使用 "),e("code",[this._v("ip netns exec")]),this._v(" 命令来在指定网络命名空间中进行配置，从而配置容器内的网络。")])}],!1,null,null,null);n.options.__file="underly.md";e.default=n.exports}}]);