(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{163:function(e,t,s){"use strict";s.r(t);var r=s(0),a=Object(r.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[e._m(0),e._v(" "),s("p",[e._v("本文由阮一峰先生的"),s("a",{attrs:{href:"http://es6.ruanyifeng.com/#README",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript 6 入门"),s("OutboundLink")],1),e._v("搬运而来，旨在在搬运过程中学习Docker，跟随书籍更新学习ES6新内容，仅为个人学习手册使用。")]),e._v(" "),s("p",[e._v("ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。")]),e._v(" "),e._m(1),e._v(" "),s("p",[e._v("一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？")]),e._v(" "),s("p",[e._v("要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。")]),e._v(" "),s("p",[e._v("该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。")]),e._v(" "),s("p",[e._v("因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。日常场合，这两个词是可以互换的。")]),e._v(" "),e._m(2),e._v(" "),s("p",[e._v("ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？")]),e._v(" "),s("p",[e._v("2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。")]),e._v(" "),s("p",[e._v("但是，因为这个版本引入的语法功能太多，而且制定过程当中，还有很多组织和个人不断提交新功能。事情很快就变得清楚了，不可能在一个版本里面包括所有将要引入的功能。常规的做法是先发布 6.0 版，过一段时间再发 6.1 版，然后是 6.2 版、6.3 版等等。")]),e._v(" "),s("p",[e._v("但是，标准的制定者不想这样做。他们想让标准的升级成为常规流程：任何人在任何时候，都可以向标准委员会提交新语法的提案，然后标准委员会每个月开一次会，评估这些提案是否可以接受，需要哪些改进。如果经过多次会议以后，一个提案足够成熟了，就可以正式进入标准了。这就是说，标准的版本升级成为了一个不断滚动的流程，每个月都会有变动。")]),e._v(" "),s("p",[e._v("标准委员会最终决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的 6 月份，草案就自然变成了新一年的版本。这样一来，就不需要以前的版本号了，只要用年份标记就可以了。")]),e._v(" "),e._m(3),e._v(" "),s("p",[e._v("因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。")]),e._v(" "),e._m(4),e._v(" "),s("p",[e._v("任何人都可以向标准委员会（又称 TC39 委员会）提案，要求修改语言标准。")]),e._v(" "),s("p",[e._v("一种新的语法从提案到变成正式标准，需要经历五个阶段。每个阶段的变动都需要由 TC39 委员会批准。")]),e._v(" "),e._m(5),e._v(" "),s("p",[e._v("一个提案只要能进入 Stage 2，就差不多肯定会包括在以后的正式标准里面。ECMAScript 当前的所有提案，可以在 TC39 的官方网站"),s("a",{attrs:{href:"https://github.com/tc39/ecma262",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github.com/tc39/ecma262"),s("OutboundLink")],1),e._v("查看。")]),e._v(" "),s("p",[e._v("本书的写作目标之一，是跟踪 ECMAScript 语言的最新进展，介绍 5.1 版本以后所有的新语法。对于那些明确或很有希望，将要列入标准的新语法，都将予以介绍。")]),e._v(" "),e._m(6),e._v(" "),s("p",[e._v("ES6 从开始制定到最后发布，整整用了 15 年。")]),e._v(" "),s("p",[e._v("前面提到，ECMAScript 1.0 是 1997 年发布的，接下来的两年，连续发布了 ECMAScript 2.0（1998 年 6 月）和 ECMAScript 3.0（1999 年 12 月）。3.0 版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了 JavaScript 语言的基本语法，以后的版本完全继承。直到今天，初学者一开始学习 JavaScript，其实就是在学 3.0 版的语法。")]),e._v(" "),s("p",[e._v("2000 年，ECMAScript 4.0 开始酝酿。这个版本最后没有通过，但是它的大部分内容被 ES6 继承了。因此，ES6 制定的起点其实是 2000 年。")]),e._v(" "),s("p",[e._v("为什么 ES4 没有通过呢？因为这个版本太激进了，对 ES3 做了彻底升级，导致标准委员会的一些成员不愿意接受。ECMA 的第 39 号技术专家委员会（Technical Committee 39，简称 TC39）负责制订 ECMAScript 标准，成员包括 Microsoft、Mozilla、Google 等大公司。")]),e._v(" "),s("p",[e._v("2007 年 10 月，ECMAScript 4.0 版草案发布，本来预计次年 8 月发布正式版本。但是，各方对于是否通过这个标准，发生了严重分歧。以 Yahoo、Microsoft、Google 为首的大公司，反对 JavaScript 的大幅升级，主张小幅改动；以 JavaScript 创造者 Brendan Eich 为首的 Mozilla 公司，则坚持当前的草案。")]),e._v(" "),s("p",[e._v("2008 年 7 月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激烈，ECMA 开会决定，中止 ECMAScript 4.0 的开发，将其中涉及现有功能改善的一小部分，发布为 ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为 Harmony（和谐）。会后不久，ECMAScript 3.1 就改名为 ECMAScript 5。")]),e._v(" "),s("p",[e._v("2009 年 12 月，ECMAScript 5.0 版正式发布。Harmony 项目则一分为二，一些较为可行的设想定名为 JavaScript.next 继续开发，后来演变成 ECMAScript 6；一些不是很成熟的设想，则被视为 JavaScript.next.next，在更远的将来再考虑推出。TC39 委员会的总体考虑是，ES5 与 ES3 基本保持兼容，较大的语法修正和新功能加入，将由 JavaScript.next 完成。当时，JavaScript.next 指的是 ES6，第六版发布以后，就指 ES7。TC39 的判断是，ES5 会在 2013 年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。")]),e._v(" "),s("p",[e._v("2011 年 6 月，ECMAscript 5.1 版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。")]),e._v(" "),s("p",[e._v("2013 年 3 月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。")]),e._v(" "),s("p",[e._v("2013 年 12 月，ECMAScript 6 草案发布。然后是 12 个月的讨论期，听取各方反馈。")]),e._v(" "),s("p",[e._v("2015 年 6 月，ECMAScript 6 正式通过，成为国际标准。从 2000 年算起，这时已经过去了 15 年。")]),e._v(" "),e._m(7),e._v(" "),s("p",[e._v("各大浏览器的最新版本，对 ES6 的支持可以查看"),s("a",{attrs:{href:"https://kangax.github.io/compat-table/es6/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kangax.github.io/compat-table/es6/"),s("OutboundLink")],1),e._v("。随着时间的推移，支持度已经越来越高了，超过 90%的 ES6 语法特性都实现了。")]),e._v(" "),s("p",[e._v("Node 是 JavaScript 的服务器运行环境（runtime）。它对 ES6 的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看 Node 已经实现的 ES6 特性。")]),e._v(" "),e._m(8),s("p",[e._v("我写了一个工具 "),s("a",{attrs:{href:"https://github.com/ruanyf/es-checker",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES-Checker"),s("OutboundLink")],1),e._v("，用来检查各种运行环境对 ES6 的支持情况。访问"),s("a",{attrs:{href:"http://ruanyf.github.io/es-checker",target:"_blank",rel:"noopener noreferrer"}},[e._v("ruanyf.github.io/es-checker"),s("OutboundLink")],1),e._v("，可以看到您的浏览器支持 ES6 的程度。运行下面的命令，可以查看你正在使用的 Node 环境对 ES6 的支持程度。")]),e._v(" "),e._m(9),e._m(10),e._v(" "),s("p",[s("a",{attrs:{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel"),s("OutboundLink")],1),e._v(" 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。")]),e._v(" "),e._m(11),s("p",[e._v("上面的原始代码用了箭头函数，Babel 将其转为普通函数，就能在不支持箭头函数的 JavaScript 环境执行了。")]),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),s("p",[e._v("该文件用来设置转码规则和插件，基本格式如下。")]),e._v(" "),e._m(14),e._m(15),e._v(" "),e._m(16),e._m(17),e._v(" "),e._m(18),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),s("p",[e._v("它的安装命令如下。")]),e._v(" "),e._m(22),s("p",[e._v("基本用法如下。")]),e._v(" "),e._m(23),s("p",[e._v("上面代码是在全局环境下，进行 Babel 转码。这意味着，如果项目要运行，全局环境必须有 Babel，也就是说项目产生了对环境的依赖。另一方面，这样做也无法支持不同项目使用不同版本的 Babel。")]),e._v(" "),e._m(24),e._v(" "),e._m(25),e._m(26),e._v(" "),e._m(27),s("p",[e._v("转码的时候，就执行下面的命令。")]),e._v(" "),e._m(28),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._m(33),e._v(" "),e._m(34),e._m(35),e._v(" "),e._m(36),e._m(37),e._v(" "),e._m(38),e._m(39),e._v(" "),e._m(40),e._v(" "),e._m(41),e._v(" "),e._m(42),e._m(43),e._v(" "),e._m(44),e._m(45),e._v(" "),e._m(46),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),s("p",[e._v("安装命令如下。")]),e._v(" "),e._m(49),e._m(50),e._v(" "),e._m(51),s("p",[e._v("配置对象"),s("code",[e._v("options")]),e._v("，可以参看官方文档"),s("a",{attrs:{href:"http://babeljs.io/docs/usage/options/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://babeljs.io/docs/usage/options/"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("下面是一个例子。")]),e._v(" "),e._m(52),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),s("p",[e._v("安装命令如下。")]),e._v(" "),e._m(57),s("p",[e._v("然后，在脚本头部，加入如下一行代码。")]),e._v(" "),e._m(58),s("p",[e._v("Babel 默认不转码的 API 非常多，详细清单可以查看"),s("code",[e._v("babel-plugin-transform-runtime")]),e._v("模块的"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-runtime/src/definitions.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("definitions.js"),s("OutboundLink")],1),e._v("文件。")]),e._v(" "),e._m(59),e._v(" "),s("p",[e._v("Babel 也可以用于浏览器环境。但是，从 Babel 6.0 开始，不再直接提供浏览器版本，而是要用构建工具构建出来。如果你没有或不想使用构建工具，可以使用"),s("a",{attrs:{href:"https://github.com/Daniel15/babel-standalone",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel-standalone"),s("OutboundLink")],1),e._v("模块提供的浏览器版本，将其插入网页。")]),e._v(" "),e._m(60),s("p",[e._v("注意，网页实时将 ES6 代码转为 ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。")]),e._v(" "),e._m(61),e._v(" "),e._m(62),s("p",[e._v("然后，再用命令行转换 ES6 脚本。")]),e._v(" "),e._m(63),e._m(64),e._v(" "),e._m(65),e._v(" "),e._m(66),e._m(67),e._v(" "),s("p",[e._v("Babel 提供一个"),s("a",{attrs:{href:"https://babeljs.io/repl/",target:"_blank",rel:"noopener noreferrer"}},[e._v("REPL 在线编译器"),s("OutboundLink")],1),e._v("，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。")]),e._v(" "),e._m(68),e._v(" "),s("p",[e._v("许多工具需要 Babel 进行前置转码，这里举两个例子：ESLint 和 Mocha。")]),e._v(" "),s("p",[e._v("ESLint 用于静态检查代码的语法和风格，安装命令如下。")]),e._v(" "),e._m(69),e._m(70),e._v(" "),e._m(71),e._m(72),e._v(" "),e._m(73),e._m(74),e._v(" "),e._m(75),e._m(76),e._v(" "),e._m(77),e._v(" "),s("p",[e._v("Google 公司的"),s("a",{attrs:{href:"https://github.com/google/traceur-compiler",target:"_blank",rel:"noopener noreferrer"}},[e._v("Traceur"),s("OutboundLink")],1),e._v("转码器，也可以将 ES6 代码转为 ES5 代码。")]),e._v(" "),e._m(78),e._v(" "),s("p",[e._v("Traceur 允许将 ES6 代码直接插入网页。首先，必须在网页头部加载 Traceur 库文件。")]),e._v(" "),e._m(79),e._m(80),e._v(" "),e._m(81),e._v(" "),s("p",[e._v("除了引用外部 ES6 脚本，也可以直接在网页中放置 ES6 代码。")]),e._v(" "),e._m(82),e._m(83),e._v(" "),s("p",[e._v("如果想对 Traceur 的行为有精确控制，可以采用下面参数配置的写法。")]),e._v(" "),e._m(84),e._m(85),e._v(" "),e._m(86),e._v(" "),s("p",[e._v("Traceur 也提供一个"),s("a",{attrs:{href:"http://google.github.io/traceur-compiler/demo/repl.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线编译器"),s("OutboundLink")],1),e._v("，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。")]),e._v(" "),s("p",[e._v("上面的例子转为 ES5 代码运行，就是下面这个样子。")]),e._v(" "),e._m(87),e._m(88),e._v(" "),s("p",[e._v("作为命令行工具使用时，Traceur 是一个 Node 的模块，首先需要用 npm 安装。")]),e._v(" "),e._m(89),s("p",[e._v("安装成功后，就可以在命令行下使用 Traceur 了。")]),e._v(" "),e._m(90),e._v(" "),e._m(91),s("p",[e._v("如果要将 ES6 脚本转为 ES5 保存，要采用下面的写法。")]),e._v(" "),e._m(92),e._m(93),e._v(" "),e._m(94),e._v(" "),e._m(95),s("p",[e._v("命令行下转换生成的文件，就可以直接放到浏览器中运行。")]),e._v(" "),e._m(96),e._v(" "),e._m(97),e._v(" "),e._m(98)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"ecmascript-6-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-6-简介","aria-hidden":"true"}},[this._v("#")]),this._v(" ECMAScript 6 简介")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"ecmascript-和-javascript-的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-和-javascript-的关系","aria-hidden":"true"}},[this._v("#")]),this._v(" ECMAScript 和 JavaScript 的关系")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"es6-与-ecmascript-2015-的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-与-ecmascript-2015-的关系","aria-hidden":"true"}},[this._v("#")]),this._v(" ES6 与 ECMAScript 2015 的关系")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小（只新增了数组实例的"),t("code",[this._v("includes")]),this._v("方法和指数运算符），基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"语法提案的批准流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法提案的批准流程","aria-hidden":"true"}},[this._v("#")]),this._v(" 语法提案的批准流程")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("Stage 0 - Strawman（展示阶段）")]),e._v(" "),s("li",[e._v("Stage 1 - Proposal（征求意见阶段）")]),e._v(" "),s("li",[e._v("Stage 2 - Draft（草案阶段）")]),e._v(" "),s("li",[e._v("Stage 3 - Candidate（候选人阶段）")]),e._v(" "),s("li",[e._v("Stage 4 - Finished（定案阶段）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"ecmascript-的历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-的历史","aria-hidden":"true"}},[this._v("#")]),this._v(" ECMAScript 的历史")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"部署进度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署进度","aria-hidden":"true"}},[this._v("#")]),this._v(" 部署进度")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// Linux & Mac\n$ node --v8-options | grep harmony\n\n// Windows\n$ node --v8-options | findstr harmony\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install -g es-checker\n$ es-checker\n\n=========================================\nPasses 24 feature Dectations\nYour runtime supports 57% of ECMAScript 6\n=========================================\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"babel-转码器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-转码器","aria-hidden":"true"}},[this._v("#")]),this._v(" Babel 转码器")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"配置文件-babelrc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置文件-babelrc","aria-hidden":"true"}},[this._v("#")]),this._v(" 配置文件"),t("code",[this._v(".babelrc")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Babel 的配置文件是"),t("code",[this._v(".babelrc")]),this._v("，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n  "presets": [],\n  "plugins": []\n}\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("presets")]),this._v("字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("# 最新转码规则\n$ npm install --save-dev babel-preset-latest\n\n# react 转码规则\n$ npm install --save-dev babel-preset-react\n\n# 不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，将这些规则加入"),t("code",[this._v(".babelrc")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('  {\n    "presets": [\n      "latest",\n      "react",\n      "stage-2"\n    ],\n    "plugins": []\n  }\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("注意，以下所有 Babel 工具和模块的使用，都必须先写好"),t("code",[this._v(".babelrc")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"命令行转码babel-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行转码babel-cli","aria-hidden":"true"}},[this._v("#")]),this._v(" 命令行转码"),t("code",[this._v("babel-cli")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Babel 提供"),t("code",[this._v("babel-cli")]),this._v("工具，用于命令行转码。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install --global babel-cli\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("# 转码结果输出到标准输出\n$ babel example.js\n\n# 转码结果写入一个文件\n# --out-file 或 -o 参数指定输出文件\n$ babel example.js --out-file compiled.js\n# 或者\n$ babel example.js -o compiled.js\n\n# 整个目录转码\n# --out-dir 或 -d 参数指定输出目录\n$ babel src --out-dir lib\n# 或者\n$ babel src -d lib\n\n# -s 参数生成source map文件\n$ babel src -d lib -s\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("一个解决办法是将"),t("code",[this._v("babel-cli")]),this._v("安装在项目之中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("# 安装\n$ npm install --save-dev babel-cli\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，改写"),t("code",[this._v("package.json")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n  // ...\n  "devDependencies": {\n    "babel-cli": "^6.0.0"\n  },\n  "scripts": {\n    "build": "babel src -d lib"\n  },\n}\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm run build\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"babel-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-node","aria-hidden":"true"}},[this._v("#")]),this._v(" babel-node")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("babel-cli")]),this._v("工具自带一个"),t("code",[this._v("babel-node")]),this._v("命令，提供一个支持 ES6 的 REPL 环境。它支持 Node 的 REPL 环境的所有功能，而且可以直接运行 ES6 代码。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("它不用单独安装，而是随"),t("code",[this._v("babel-cli")]),this._v("一起安装。然后，执行"),t("code",[this._v("babel-node")]),this._v("就进入 REPL 环境。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ babel-node\n> (x => x * 2)(1)\n2\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("babel-node")]),this._v("命令可以直接运行 ES6 脚本。将上面的代码放入脚本文件"),t("code",[this._v("es6.js")]),this._v("，然后直接运行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ babel-node es6.js\n2\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("babel-node")]),this._v("也可以安装在项目中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install --save-dev babel-cli\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，改写"),t("code",[this._v("package.json")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n  "scripts": {\n    "script-name": "babel-node script.js"\n  }\n}\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，使用"),t("code",[this._v("babel-node")]),this._v("替代"),t("code",[this._v("node")]),this._v("，这样"),t("code",[this._v("script.js")]),this._v("本身就不用做任何转码处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"babel-register"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-register","aria-hidden":"true"}},[this._v("#")]),this._v(" babel-register")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("babel-register")]),e._v("模块改写"),s("code",[e._v("require")]),e._v("命令，为它加上一个钩子。此后，每当使用"),s("code",[e._v("require")]),e._v("加载"),s("code",[e._v(".js")]),e._v("、"),s("code",[e._v(".jsx")]),e._v("、"),s("code",[e._v(".es")]),e._v("和"),s("code",[e._v(".es6")]),e._v("后缀名的文件，就会先用 Babel 进行转码。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install --save-dev babel-register\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用时，必须首先加载"),t("code",[this._v("babel-register")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('require("babel-register");\nrequire("./index.js");\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，就不需要手动对"),t("code",[this._v("index.js")]),this._v("转码了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("需要注意的是，"),t("code",[this._v("babel-register")]),this._v("只会对"),t("code",[this._v("require")]),this._v("命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"babel-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-core","aria-hidden":"true"}},[this._v("#")]),this._v(" babel-core")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果某些代码需要调用 Babel 的 API 进行转码，就要使用"),t("code",[this._v("babel-core")]),this._v("模块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install babel-core --save\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，在项目中就可以调用"),t("code",[this._v("babel-core")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var babel = require('babel-core');\n\n// 字符串转码\nbabel.transform('code();', options);\n// => { code, map, ast }\n\n// 文件转码（异步）\nbabel.transformFile('filename.js', options, function(err, result) {\n  result; // => { code, map, ast }\n});\n\n// 文件转码（同步）\nbabel.transformFileSync('filename.js', options);\n// => { code, map, ast }\n\n// Babel AST转码\nbabel.transformFromAst(ast, code, options);\n// => { code, map, ast }\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var es6Code = 'let x = n => n + 1';\nvar es5Code = require('babel-core')\n  .transform(es6Code, {\n    presets: ['latest']\n  })\n  .code;\n// '\"use strict\";\\n\\nvar x = function x(n) {\\n  return n + 1;\\n};'\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，"),t("code",[this._v("transform")]),this._v("方法的第一个参数是一个字符串，表示需要被转换的 ES6 代码，第二个参数是转换的配置对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"babel-polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-polyfill","aria-hidden":"true"}},[this._v("#")]),this._v(" babel-polyfill")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如"),s("code",[e._v("Iterator")]),e._v("、"),s("code",[e._v("Generator")]),e._v("、"),s("code",[e._v("Set")]),e._v("、"),s("code",[e._v("Map")]),e._v("、"),s("code",[e._v("Proxy")]),e._v("、"),s("code",[e._v("Reflect")]),e._v("、"),s("code",[e._v("Symbol")]),e._v("、"),s("code",[e._v("Promise")]),e._v("等全局对象，以及一些定义在全局对象上的方法（比如"),s("code",[e._v("Object.assign")]),e._v("）都不会转码。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("举例来说，ES6 在"),t("code",[this._v("Array")]),this._v("对象上新增了"),t("code",[this._v("Array.from")]),this._v("方法。Babel 就不会转码这个方法。如果想让这个方法运行，必须使用"),t("code",[this._v("babel-polyfill")]),this._v("，为当前环境提供一个垫片。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install --save babel-polyfill\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"浏览器环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器环境")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.4.4/babel.min.js"><\/script>\n<script type="text/babel">\n// Your ES6 code\n<\/script>\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面是如何将代码打包成浏览器可以使用的脚本，以"),t("code",[this._v("Babel")]),this._v("配合"),t("code",[this._v("Browserify")]),this._v("为例。首先，安装"),t("code",[this._v("babelify")]),this._v("模块。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install --save-dev babelify babel-preset-latest\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$  browserify script.js -o bundle.js \\\n  -t [ babelify --presets [ latest ] ]\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码将 ES6 脚本"),t("code",[this._v("script.js")]),this._v("，转为"),t("code",[this._v("bundle.js")]),this._v("，浏览器直接加载后者就可以了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在"),t("code",[this._v("package.json")]),this._v("设置下面的代码，就不用每次命令行都输入参数了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n  "browserify": {\n    "transform": [["babelify", { "presets": ["latest"] }]]\n  }\n}\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"在线转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在线转换","aria-hidden":"true"}},[this._v("#")]),this._v(" 在线转换")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"与其他工具的配合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与其他工具的配合","aria-hidden":"true"}},[this._v("#")]),this._v(" 与其他工具的配合")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install --save-dev eslint babel-eslint\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("然后，在项目根目录下，新建一个配置文件"),t("code",[this._v(".eslintrc")]),this._v("，在其中加入"),t("code",[this._v("parser")]),this._v("字段。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n  "parser": "babel-eslint",\n  "rules": {\n    ...\n  }\n}\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("再在"),t("code",[this._v("package.json")]),this._v("之中，加入相应的"),t("code",[this._v("scripts")]),this._v("脚本。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('  {\n    "name": "my-module",\n    "scripts": {\n      "lint": "eslint my-files.js"\n    },\n    "devDependencies": {\n      "babel-eslint": "...",\n      "eslint": "..."\n    }\n  }\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Mocha 则是一个测试框架，如果需要执行使用 ES6 语法的测试脚本，可以修改"),t("code",[this._v("package.json")]),this._v("的"),t("code",[this._v("scripts.test")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('"scripts": {\n  "test": "mocha --ui qunit --compilers js:babel-core/register"\n}\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面命令中，"),t("code",[this._v("--compilers")]),this._v("参数指定脚本的转码器，规定后缀名为"),t("code",[this._v("js")]),this._v("的文件，都需要使用"),t("code",[this._v("babel-core/register")]),this._v("先转码。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"traceur-转码器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#traceur-转码器","aria-hidden":"true"}},[this._v("#")]),this._v(" Traceur 转码器")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"直接插入网页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接插入网页","aria-hidden":"true"}},[this._v("#")]),this._v(" 直接插入网页")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script src="https://google.github.io/traceur-compiler/bin/traceur.js"><\/script>\n<script src="https://google.github.io/traceur-compiler/bin/BrowserSystem.js"><\/script>\n<script src="https://google.github.io/traceur-compiler/src/bootstrap.js"><\/script>\n<script type="module">\n  import \'./Greeter.js\';\n<\/script>\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，一共有 4 个"),t("code",[this._v("script")]),this._v("标签。第一个是加载 Traceur 的库文件，第二个和第三个是将这个库文件用于浏览器环境，第四个则是加载用户脚本，这个脚本里面可以使用 ES6 代码。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("注意，第四个"),s("code",[e._v("script")]),e._v("标签的"),s("code",[e._v("type")]),e._v("属性的值是"),s("code",[e._v("module")]),e._v("，而不是"),s("code",[e._v("text/javascript")]),e._v("。这是 Traceur 编译器识别 ES6 代码的标志，编译器会自动将所有"),s("code",[e._v("type=module")]),e._v("的代码编译为 ES5，然后再交给浏览器执行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script type=\"module\">\n  class Calc {\n    constructor() {\n      console.log('Calc constructor');\n    }\n    add(a, b) {\n      return a + b;\n    }\n  }\n\n  var c = new Calc();\n  console.log(c.add(4,5));\n<\/script>\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("正常情况下，上面代码会在控制台打印出"),t("code",[this._v("9")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script>\n  // Create the System object\n  window.System = new traceur.runtime.BrowserTraceurLoader();\n  // Set some experimental options\n  var metadata = {\n    traceurOptions: {\n      experimental: true,\n      properTailCalls: true,\n      symbols: true,\n      arrayComprehension: true,\n      asyncFunctions: true,\n      asyncGenerators: exponentiation,\n      forOn: true,\n      generatorComprehension: true\n    }\n  };\n  // Load your module\n  System.import('./myModule.js', {metadata: metadata}).catch(function(ex) {\n    console.error('Import failed', ex.stack || ex);\n  });\n<\/script>\n\n")])])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("上面代码中，首先生成 Traceur 的全局对象"),s("code",[e._v("window.System")]),e._v("，然后"),s("code",[e._v("System.import")]),e._v("方法可以用来加载 ES6。加载的时候，需要传入一个配置对象"),s("code",[e._v("metadata")]),e._v("，该对象的"),s("code",[e._v("traceurOptions")]),e._v("属性可以配置支持 ES6 功能。如果设为"),s("code",[e._v("experimental: true")]),e._v("，就表示除了 ES6 以外，还支持一些实验性的新功能。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"在线转换-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在线转换-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 在线转换")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script src="https://google.github.io/traceur-compiler/bin/traceur.js"><\/script>\n<script src="https://google.github.io/traceur-compiler/bin/BrowserSystem.js"><\/script>\n<script src="https://google.github.io/traceur-compiler/src/bootstrap.js"><\/script>\n<script>\n$traceurRuntime.ModuleStore.getAnonymousModule(function() {\n  "use strict";\n\n  var Calc = function Calc() {\n    console.log(\'Calc constructor\');\n  };\n\n  ($traceurRuntime.createClass)(Calc, {add: function(a, b) {\n    return a + b;\n  }}, {});\n\n  var c = new Calc();\n  console.log(c.add(4, 5));\n  return {};\n});\n<\/script>\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"命令行转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行转换","aria-hidden":"true"}},[this._v("#")]),this._v(" 命令行转换")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ npm install -g traceur\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Traceur 直接运行 ES6 脚本文件，会在标准输出显示运行结果，以前面的"),t("code",[this._v("calc.js")]),this._v("为例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ traceur calc.js\nCalc constructor\n9\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ traceur --script calc.es6.js --out calc.es5.js\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码的"),t("code",[this._v("--script")]),this._v("选项表示指定输入文件，"),t("code",[this._v("--out")]),this._v("选项表示指定输出文件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了防止有些特性编译不成功，最好加上"),t("code",[this._v("--experimental")]),this._v("选项。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ traceur --script calc.es6.js --out calc.es5.js --experimental\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"node-环境的用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-环境的用法","aria-hidden":"true"}},[this._v("#")]),this._v(" Node 环境的用法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Traceur 的 Node 用法如下（假定已安装"),t("code",[this._v("traceur")]),this._v("模块）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var traceur = require('traceur');\nvar fs = require('fs');\n\n// 将 ES6 脚本转为字符串\nvar contents = fs.readFileSync('es6-file.js').toString();\n\nvar result = traceur.compile(contents, {\n  filename: 'es6-file.js',\n  sourceMap: true,\n  // 其他设置\n  modules: 'commonjs'\n});\n\nif (result.error)\n  throw result.error;\n\n// result 对象的 js 属性就是转换后的 ES5 代码\nfs.writeFileSync('out.js', result.js);\n// sourceMap 属性对应 map 文件\nfs.writeFileSync('out.js.map', result.sourceMap);\n")])])])}],!1,null,null,null);a.options.__file="README.md";t.default=a.exports}}]);