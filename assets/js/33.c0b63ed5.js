(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{182:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"操作-docker-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作-docker-容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 操作 Docker 容器")]),e._v(" "),t("p",[e._v("容器是 Docker 又一核心概念。")]),e._v(" "),t("p",[e._v("简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。")]),e._v(" "),t("p",[e._v("本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。")]),e._v(" "),t("h2",{attrs:{id:"启动容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动容器")]),e._v(" "),t("p",[e._v("启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（"),t("code",[e._v("stopped")]),e._v("）的容器重新启动。")]),e._v(" "),t("p",[e._v("因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。")]),e._v(" "),t("h3",{attrs:{id:"新建并启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新建并启动","aria-hidden":"true"}},[e._v("#")]),e._v(" 新建并启动")]),e._v(" "),t("p",[e._v("所需要的命令主要为 "),t("code",[e._v("docker run")]),e._v("。")]),e._v(" "),t("p",[e._v("例如，下面的命令输出一个 “Hello World”，之后终止容器。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker run ubuntu:18.04 /bin/echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Hello world'")]),e._v("\nHello world\n")])])]),t("p",[e._v("这跟在本地直接执行 "),t("code",[e._v("/bin/echo 'hello world'")]),e._v(" 几乎感觉不出任何区别。")]),e._v(" "),t("p",[e._v("下面的命令则启动一个 bash 终端，允许用户进行交互。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker run -t -i ubuntu:18.04 /bin/bash\nroot@af8bae53bdd3:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n")])])]),t("p",[e._v("其中，"),t("code",[e._v("-t")]),e._v(" 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， "),t("code",[e._v("-i")]),e._v(" 则让容器的标准输入保持打开。")]),e._v(" "),t("p",[e._v("在交互模式下，用户可以通过所创建的终端来输入命令，例如")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("root@af8bae53bdd3:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# pwd")]),e._v("\n/\nroot@af8bae53bdd3:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ls")]),e._v("\nbin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var\n")])])]),t("p",[e._v("当利用 "),t("code",[e._v("docker run")]),e._v(" 来创建容器时，Docker 在后台运行的标准操作包括：")]),e._v(" "),t("ul",[t("li",[e._v("检查本地是否存在指定的镜像，不存在就从公有仓库下载")]),e._v(" "),t("li",[e._v("利用镜像创建并启动一个容器")]),e._v(" "),t("li",[e._v("分配一个文件系统，并在只读的镜像层外面挂载一层可读写层")]),e._v(" "),t("li",[e._v("从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去")]),e._v(" "),t("li",[e._v("从地址池配置一个 ip 地址给容器")]),e._v(" "),t("li",[e._v("执行用户指定的应用程序")]),e._v(" "),t("li",[e._v("执行完毕后容器被终止")])]),e._v(" "),t("h3",{attrs:{id:"启动已终止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动已终止容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动已终止容器")]),e._v(" "),t("p",[e._v("可以利用 "),t("code",[e._v("docker container start")]),e._v(" 命令，直接将一个已经终止的容器启动运行。")]),e._v(" "),t("p",[e._v("容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 "),t("code",[e._v("ps")]),e._v(" 或 "),t("code",[e._v("top")]),e._v(" 来查看进程信息。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("root@ba267838cc1b:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ps")]),e._v("\n  PID TTY          TIME CMD\n    1 ?        00:00:00 "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n   11 ?        00:00:00 "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\n")])])]),t("p",[e._v("可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。")]),e._v(" "),t("h2",{attrs:{id:"后台运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后台运行","aria-hidden":"true"}},[e._v("#")]),e._v(" 后台运行")]),e._v(" "),t("p",[e._v("更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 "),t("code",[e._v("-d")]),e._v(" 参数来实现。")]),e._v(" "),t("p",[e._v("下面举两个例子来说明一下。")]),e._v(" "),t("p",[e._v("如果不使用 "),t("code",[e._v("-d")]),e._v(" 参数运行容器。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker run ubuntu:18.04 /bin/sh -c "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"while true; do echo hello world; sleep 1; done"')]),e._v("\nhello world\nhello world\nhello world\nhello world\n")])])]),t("p",[e._v("容器会把输出的结果 (STDOUT) 打印到宿主机上面")]),e._v(" "),t("p",[e._v("如果使用了 "),t("code",[e._v("-d")]),e._v(" 参数运行容器。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker run -d ubuntu:18.04 /bin/sh -c "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"while true; do echo hello world; sleep 1; done"')]),e._v("\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n")])])]),t("p",[e._v("此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 "),t("code",[e._v("docker logs")]),e._v(" 查看)。")]),e._v(" "),t("p",[t("strong",[e._v("注：")]),e._v(" 容器是否会长久运行，是和 "),t("code",[e._v("docker run")]),e._v(" 指定的命令有关，和 "),t("code",[e._v("-d")]),e._v(" 参数无关。")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("-d")]),e._v(" 参数启动后会返回一个唯一的 id，也可以通过 "),t("code",[e._v("docker container ls")]),e._v(" 命令来查看容器信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker container ls\nCONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES\n77b2dc01fe0f  ubuntu:18.04  /bin/sh -c 'while tr  2 minutes ago  Up 1 minute        agitated_wright\n")])])]),t("p",[e._v("要获取容器的输出信息，可以通过 "),t("code",[e._v("docker container logs")]),e._v(" 命令。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker container logs "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("container ID or NAMES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nhello world\nhello world\nhello world\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v(".")]),e._v("\n")])])]),t("h2",{attrs:{id:"终止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#终止容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 终止容器")]),e._v(" "),t("p",[e._v("可以使用 "),t("code",[e._v("docker container stop")]),e._v(" 来终止一个运行中的容器。")]),e._v(" "),t("p",[e._v("此外，当 Docker 容器中指定的应用终结时，容器也自动终止。")]),e._v(" "),t("p",[e._v("例如对于上一章节中只启动了一个终端的容器，用户通过 "),t("code",[e._v("exit")]),e._v(" 命令或 "),t("code",[e._v("Ctrl+d")]),e._v(" 来退出终端时，所创建的容器立刻终止。")]),e._v(" "),t("p",[e._v("终止状态的容器可以用 "),t("code",[e._v("docker container ls -a")]),e._v(" 命令看到。例如")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -a\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        ubuntu:18.04             "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/bash"')]),e._v("            30 minutes ago      Exited "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" About a minute ago                       trusting_newton\n98e5efa7d997        training/webapp:latest   "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"python app.py"')]),e._v("        About an hour ago   Exited "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" 34 minutes ago                           backstabbing_pike\n")])])]),t("p",[e._v("处于终止状态的容器，可以通过 "),t("code",[e._v("docker container start")]),e._v(" 命令来重新启动。")]),e._v(" "),t("p",[e._v("此外，"),t("code",[e._v("docker container restart")]),e._v(" 命令会将一个运行态的容器终止，然后再重新启动它。")]),e._v(" "),t("h2",{attrs:{id:"进入容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进入容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 进入容器")]),e._v(" "),t("p",[e._v("在使用 "),t("code",[e._v("-d")]),e._v(" 参数时，容器启动后会进入后台。")]),e._v(" "),t("p",[e._v("某些时候需要进入容器进行操作，包括使用 "),t("code",[e._v("docker attach")]),e._v(" 命令或 "),t("code",[e._v("docker exec")]),e._v(" 命令，推荐大家使用 "),t("code",[e._v("docker exec")]),e._v(" 命令，原因会在下面说明。")]),e._v(" "),t("h3",{attrs:{id:"attach-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#attach-命令","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("code",[e._v("attach")]),e._v(" 命令")]),e._v(" "),t("p",[e._v("下面示例如何使用 "),t("code",[e._v("docker attach")]),e._v(" 命令。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker run -dit ubuntu\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n\ndocker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n243c32535da7        ubuntu:latest       "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/bash"')]),e._v("         18 seconds ago      Up 17 seconds                           nostalgic_hypatia\n\ndocker attach 243c\nroot@243c32535da7:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n")])])]),t("p",[t("em",[e._v("注意：")]),e._v(" 如果从这个 stdin 中 exit，会导致容器的停止。")]),e._v(" "),t("h3",{attrs:{id:"exec-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec-命令","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("code",[e._v("exec")]),e._v(" 命令")]),e._v(" "),t("h4",{attrs:{id:"i-t-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#i-t-参数","aria-hidden":"true"}},[e._v("#")]),e._v(" -i -t 参数")]),e._v(" "),t("p",[t("code",[e._v("docker exec")]),e._v(" 后边可以跟多个参数，这里主要说明 "),t("code",[e._v("-i")]),e._v(" "),t("code",[e._v("-t")]),e._v(" 参数。")]),e._v(" "),t("p",[e._v("只用 "),t("code",[e._v("-i")]),e._v(" 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。")]),e._v(" "),t("p",[e._v("当 "),t("code",[e._v("-i")]),e._v(" "),t("code",[e._v("-t")]),e._v(" 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker run -dit ubuntu\n69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6\n\ndocker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n69d137adef7a        ubuntu:latest       "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/bash"')]),e._v("         18 seconds ago      Up 17 seconds                           zealous_swirles\n\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),e._v(" -i 69d1 "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\nbin\nboot\ndev\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("exec")]),e._v(" -it 69d1 "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\nroot@69d137adef7a:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n")])])]),t("p",[e._v("如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 "),t("code",[e._v("docker exec")]),e._v(" 的原因。")]),e._v(" "),t("p",[e._v("更多参数说明请使用 "),t("code",[e._v("docker exec --help")]),e._v(" 查看。")]),e._v(" "),t("h2",{attrs:{id:"导出和导入容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导出和导入容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 导出和导入容器")]),e._v(" "),t("h3",{attrs:{id:"导出容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导出容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 导出容器")]),e._v(" "),t("p",[e._v("如果要导出本地某个容器，可以使用 "),t("code",[e._v("docker export")]),e._v(" 命令。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES\n7691a814370e        ubuntu:18.04        "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/bash"')]),e._v("         36 hours ago        Exited "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" 21 hours ago                       "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("test")]),e._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("export")]),e._v(" 7691a814370e "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ubuntu.tar\n")])])]),t("p",[e._v("这样将导出容器快照到本地文件。")]),e._v(" "),t("h3",{attrs:{id:"导入容器快照"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入容器快照","aria-hidden":"true"}},[e._v("#")]),e._v(" 导入容器快照")]),e._v(" "),t("p",[e._v("可以使用 "),t("code",[e._v("docker import")]),e._v(" 从容器快照文件中再导入为镜像，例如")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" ubuntu.tar "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" docker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("import")]),e._v(" - test/ubuntu:v1.0\ndocker image "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE\ntest/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB\n")])])]),t("p",[e._v("此外，也可以通过指定 URL 或者某个目录来导入，例如")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("import")]),e._v(" http://example.com/exampleimage.tgz example/imagerepo\n")])])]),t("p",[t("em",[e._v("注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。")])]),e._v(" "),t("h2",{attrs:{id:"删除容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 删除容器")]),e._v(" "),t("p",[e._v("可以使用 "),t("code",[e._v("docker container rm")]),e._v(" 来删除一个处于终止状态的容器。例如")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v("  trusting_newton\ntrusting_newton\n")])])]),t("p",[e._v("如果要删除一个运行中的容器，可以添加 "),t("code",[e._v("-f")]),e._v(" 参数。Docker 会发送 "),t("code",[e._v("SIGKILL")]),e._v(" 信号给容器。")]),e._v(" "),t("h2",{attrs:{id:"清理所有处于终止状态的容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清理所有处于终止状态的容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 清理所有处于终止状态的容器")]),e._v(" "),t("p",[e._v("用 "),t("code",[e._v("docker container ls -a")]),e._v(" 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("访问仓库\n仓库（Repository）是集中存放镜像的地方。\n\n一个容易混淆的概念是注册服务器（Registry）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 dl.dockerpool.com/ubuntu 来说，dl.dockerpool.com 是注册服务器地址，ubuntu 是仓库名。\n\n大部分时候，并不需要严格区分这两者的概念。docker container prune\n")])])])])}],!1,null,null,null);r.options.__file="UseContainer.md";a.default=r.exports}}]);