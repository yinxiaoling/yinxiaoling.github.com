(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{183:function(t,e,s){"use strict";s.r(e);var r=s(0),a=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),s("p",[t._v("此时默认会绑定本地所有接口上的所有地址。")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),s("p",[t._v("注意：")]),t._v(" "),t._m(23),t._v(" "),s("p",[t._v("例如")]),t._v(" "),t._m(24),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),s("p",[t._v("下面先创建一个新的 Docker 网络。")]),t._v(" "),t._m(29),s("p",[s("code",[t._v("-d")]),t._v(" 参数指定 Docker 网络类型，有 "),s("code",[t._v("bridge")]),t._v(" "),s("code",[t._v("overlay")]),t._v("。其中 "),s("code",[t._v("overlay")]),t._v(" 网络类型用于 "),s("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/swarm_mode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swarm mode"),s("OutboundLink")],1),t._v("，在本小节中你可以忽略它。")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),s("p",[t._v("再打开一个新的终端查看容器信息")]),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),s("p",[t._v("如果你有多个容器之间需要互相连接，推荐使用 "),s("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/compose",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Compose"),s("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(44),t._v(" "),s("p",[t._v("如何自定义配置容器的主机名和 DNS 呢？秘诀就是 Docker 利用虚拟文件来挂载容器的 3 个相关配置文件。")]),t._v(" "),t._m(45),t._v(" "),t._m(46),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._m(50),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"docker-中的网络功能介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-中的网络功能介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 中的网络功能介绍")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"外部访问容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#外部访问容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 外部访问容器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 "),e("code",[this._v("-P")]),this._v(" 或 "),e("code",[this._v("-p")]),this._v(" 参数来指定端口映射。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当使用 "),e("code",[this._v("-P")]),this._v(" 标记时，Docker 会随机映射一个 "),e("code",[this._v("49000~49900")]),this._v(" 的端口到内部容器开放的网络端口。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("docker container ls")]),this._v(" 可以看到，本地主机的 49155 被映射到了容器的 5000 端口。此时访问本机的 49155 端口即可访问容器内 web 应用提供的界面。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -d -P training/webapp python app.py\n\ndocker container ls -l\nCONTAINER ID  IMAGE                   COMMAND       CREATED        STATUS        PORTS                    NAMES\nbc533791f3f5  training/webapp:latest  python app.py 5 seconds ago  Up 2 seconds  0.0.0.0:49155->5000/tcp  nostalgic_morse\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同样的，可以通过 "),e("code",[this._v("docker logs")]),this._v(" 命令来查看应用的信息。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('docker logs -f nostalgic_morse\n* Running on http://0.0.0.0:5000/\n10.0.2.2 - - [23/May/2014 20:16:31] "GET / HTTP/1.1" 200 -\n10.0.2.2 - - [23/May/2014 20:16:31] "GET /favicon.ico HTTP/1.1" 404 -\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("-p")]),this._v(" 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 "),e("code",[this._v("ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"映射所有接口地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#映射所有接口地址","aria-hidden":"true"}},[this._v("#")]),this._v(" 映射所有接口地址")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("hostPort:containerPort")]),this._v(" 格式本地的 5000 端口映射到容器的 5000 端口，可以执行")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -d -p 5000:5000 training/webapp python app.py\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"映射到指定地址的指定端口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#映射到指定地址的指定端口","aria-hidden":"true"}},[this._v("#")]),this._v(" 映射到指定地址的指定端口")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以使用 "),e("code",[this._v("ip:hostPort:containerPort")]),this._v(" 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"映射到指定地址的任意端口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#映射到指定地址的任意端口","aria-hidden":"true"}},[this._v("#")]),this._v(" 映射到指定地址的任意端口")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("ip::containerPort")]),this._v(" 绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -d -p 127.0.0.1::5000 training/webapp python app.py\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("还可以使用 "),e("code",[this._v("udp")]),this._v(" 标记来指定 "),e("code",[this._v("udp")]),this._v(" 端口")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"查看映射端口配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看映射端口配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 查看映射端口配置")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("docker port")]),this._v(" 来查看当前映射的端口配置，也可以查看到绑定的地址")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker port nostalgic_morse 5000\n127.0.0.1:49155.\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("容器有自己的内部网络和 ip 地址（使用 "),e("code",[this._v("docker inspect")]),this._v(" 可以获取所有的变量，Docker 还可以有一个可变的网络配置。）")]),this._v(" "),e("li",[e("code",[this._v("-p")]),this._v(" 标记可以多次使用来绑定多个端口")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -d \\\n    -p 5000:5000 \\\n    -p 3000:80 \\\n    training/webapp \\\n    python app.py\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"容器互联"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器互联","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器互联")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果你之前有 "),e("code",[this._v("Docker")]),this._v(" 使用经验，你可能已经习惯了使用 "),e("code",[this._v("--link")]),this._v(" 参数来使容器互联。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("随着 Docker 网络的完善，强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 "),e("code",[this._v("--link")]),this._v(" 参数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"新建网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建网络","aria-hidden":"true"}},[this._v("#")]),this._v(" 新建网络")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker network create -d bridge my-net\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"连接容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 连接容器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("运行一个容器并连接到新建的 "),e("code",[this._v("my-net")]),this._v(" 网络")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -it --rm --name busybox1 --network my-net busybox sh\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("打开新的终端，再运行一个容器并加入到 "),e("code",[this._v("my-net")]),this._v(" 网络")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -it --rm --name busybox2 --network my-net busybox sh\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('docker container ls\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nb47060aca56b        busybox             "sh"                11 minutes ago      Up 11 minutes                           busybox2\n8720575823ec        busybox             "sh"                16 minutes ago      Up 16 minutes                           busybox1\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("下面通过 "),e("code",[this._v("ping")]),this._v(" 来证明 "),e("code",[this._v("busybox1")]),this._v(" 容器和 "),e("code",[this._v("busybox2")]),this._v(" 容器建立了互联关系。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 "),e("code",[this._v("busybox1")]),this._v(" 容器输入以下命令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("/ # ping busybox2\nPING busybox2 (172.19.0.3): 56 data bytes\n64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.072 ms\n64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.118 ms\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("用 ping 来测试连接 "),e("code",[this._v("busybox2")]),this._v(" 容器，它会解析成 "),e("code",[this._v("172.19.0.3")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同理在 "),e("code",[this._v("busybox2")]),this._v(" 容器执行 "),e("code",[this._v("ping busybox1")]),this._v("，也会成功连接到。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("/ # ping busybox1\nPING busybox1 (172.19.0.2): 56 data bytes\n64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.064 ms\n64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.143 ms\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这样，"),e("code",[this._v("busybox1")]),this._v(" 容器和 "),e("code",[this._v("busybox2")]),this._v(" 容器建立了互联关系。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"docker-compose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker Compose")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"配置-dns"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-dns","aria-hidden":"true"}},[this._v("#")]),this._v(" 配置 DNS")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在容器中使用 "),e("code",[this._v("mount")]),this._v(" 命令可以看到挂载信息：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("mount\n/dev/disk/by-uuid/1fec...ebdf on /etc/hostname type ext4 ...\n/dev/disk/by-uuid/1fec...ebdf on /etc/hosts type ext4 ...\ntmpfs on /etc/resolv.conf type tmpfs ...\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这种机制可以让宿主主机 DNS 信息发生更新后，所有 Docker 容器的 DNS 配置通过 "),e("code",[this._v("/etc/resolv.conf")]),this._v(" 文件立刻得到更新。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("配置全部容器的 DNS ，也可以在 "),e("code",[this._v("/etc/docker/daemon.json")]),this._v(" 文件中增加以下内容来设置。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dns"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"114.114.114.114"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8.8.8.8"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这样每次启动的容器 DNS 自动配置为 "),e("code",[this._v("114.114.114.114")]),this._v(" 和 "),e("code",[this._v("8.8.8.8")]),this._v("。使用以下命令来证明其已经生效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docker run -it --rm ubuntu:18.04  cat etc/resolv.conf\n\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果用户想要手动指定容器的配置，可以在使用 "),e("code",[this._v("docker run")]),this._v(" 命令启动容器时加入如下参数：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("-h HOSTNAME")]),t._v(" 或者 "),s("code",[t._v("--hostname=HOSTNAME")]),t._v(" 设定容器的主机名，它会被写到容器内的 "),s("code",[t._v("/etc/hostname")]),t._v(" 和 "),s("code",[t._v("/etc/hosts")]),t._v("。但它在容器外部看不到，既不会在 "),s("code",[t._v("docker container ls")]),t._v(" 中显示，也不会在其他的容器的 "),s("code",[t._v("/etc/hosts")]),t._v(" 看到。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("--dns=IP_ADDRESS")]),this._v(" 添加 DNS 服务器到容器的 "),e("code",[this._v("/etc/resolv.conf")]),this._v(" 中，让容器用这个服务器来解析所有不在 "),e("code",[this._v("/etc/hosts")]),this._v(" 中的主机名。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("--dns-search=DOMAIN")]),this._v(" 设定容器的搜索域，当设定搜索域为 "),e("code",[this._v(".example.com")]),this._v(" 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 "),e("code",[this._v("host.example.com")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注意：如果在容器启动时没有指定最后两个参数，Docker 会默认用主机上的 "),e("code",[this._v("/etc/resolv.conf")]),this._v(" 来配置容器。")])])}],!1,null,null,null);a.options.__file="Network.md";e.default=a.exports}}]);